<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>IE11以下兼容性问题</title>
    <url>/hexo-blog/2023/10/08/IE11%E4%BB%A5%E4%B8%8B%E5%85%BC%E5%AE%B9%E6%80%A7%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>定位到报错代码，发现使用了const语法，这个语法是IE11之后才兼容，但是项目也都配了babel-polyfill, 按理说babel-loader编译后，代码里不应该有const这个语法了。</p>
<p>问题原因在于，babel-loader没有处理node_modules 里npm包，而一些包是不支持IE11以下的，使用了const语法，这个语法没有经过bable处理。</p>
<p>那么如何解决，在babel-loader中手动指定需要额外处理的npm包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">test: /\.jsx?$/,</span><br><span class="line">            loader: &#x27;babel-loader&#x27;,</span><br><span class="line">            include: [</span><br><span class="line">               </span><br><span class="line">                /node_modules[\\/]react-popover/,</span><br><span class="line">              </span><br><span class="line">            ],</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>IOS webview audiocontext 播放无声音</title>
    <url>/hexo-blog/2023/10/27/IOS-webview-audiocontext-%E6%92%AD%E6%94%BE%E6%97%A0%E5%A3%B0%E9%9F%B3/</url>
    <content><![CDATA[<p>背景：</p>
<ol>
<li>The AudioContext was not allowed to start. It must be resumed (or created) after a user gesture on the page, 由于IOS的特殊性，audioContext的初始state&#x3D;’suspended’, 不会播放声音；必须通过用户交互的回调中ctx.resume()来解锁ctx才能播放。</li>
<li>某iphone11+IOS14.7.1手机，在客户端播放声音的同时打开webview自动播放audioContext会没有声音，检测ctx.state &#x3D; ‘interrupted’，同时客户端的声音也没有正常播放。</li>
</ol>
<p>debug：</p>
<ol>
<li>取消客户端声音播放调用，webview正常播放</li>
<li>修改客户端策略  独占 &#x3D;&gt; 混合, 客户端和webview都正常播放</li>
</ol>
<p>一些AI答疑：<br>在iOS 11及以上版本的Webview中，AudioContext的创建和启动必须在用户手势的上下文中进行。这是因为iOS 11引入了一种安全机制，以防止Web应用程序在没有用户交互的情况下自动播放音频。如果你尝试在没有用户交互的情况下创建或启动AudioContext，则会出现The AudioContext was not allowed to start. It must be resumed (or created) after a user gesture on the page.错误。</p>
<p>需要注意的是，iOS 11及以上版本的Webview中，AudioContext的限制不仅限于decodeAudioData方法，而是适用于所有涉及音频播放的API，包括HTMLMediaElement和Web Audio API等。因此，如果你的Web应用程序需要在iOS 11及以上版本的Webview中播放音频，你需要在用户手势的上下文中创建和启动AudioContext。</p>
<p>在iOS的Webview中，如果音频上下文（AudioContext）被中断，它的state属性会返回interrupted。音频上下文可能会被中断，例如当用户接收电话或者切换到其他应用程序时。在这种情况下，音频上下文会暂停，直到用户返回到Web应用程序并重新激活音频上下文。</p>
<p>在iOS的Webview中，如果使用solo策略播放音频，可能会导致AudioContext被中断，从而导致AudioContext.state返回interrupted。solo策略是指在播放音频时，将其他正在播放的音频暂停，以确保当前音频的播放效果最佳。在iOS的Webview中，如果使用solo策略播放音频，可能会导致其他正在播放的音频被暂停，从而导致音频硬件资源被占用，进而导致AudioContext无法正常工作，进而导致AudioContext.state返回interrupted。</p>
<p>在iOS中，音频播放有两种策略：独占策略和混合策略。</p>
<p>独占策略是指在播放音频时，将其他正在播放的音频暂停，以确保当前音频的播放效果最佳。这种策略适用于需要保证音频播放效果的场景，例如游戏、音乐播放器等。在iOS中，如果使用独占策略播放音频，可能会导致其他正在播放的音频被暂停，从而影响用户体验。</p>
<p>混合策略是指在播放音频时，将当前音频与其他正在播放的音频混合在一起播放。这种策略适用于需要同时播放多个音频的场景，例如语音聊天、多人游戏等。在iOS中，如果使用混合策略播放音频，可以同时播放多个音频，从而提高用户体验。</p>
<p>在iOS中，如果想要使用独占策略播放音频，你可以使用AVAudioSession类来设置音频会话的模式为AVAudioSessionCategoryPlayback，例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let session = AVAudioSession.sharedInstance()</span><br><span class="line">try session.setCategory(.playback, mode: .default, options: [])</span><br><span class="line">try session.setActive(true)</span><br></pre></td></tr></table></figure>
<p>)<br>这个代码会将音频会话的模式设置为AVAudioSessionCategoryPlayback，从而使用独占策略播放音频。注意，这个代码只是示例，你需要根据你的具体情况进行修改。</p>
<p>如果想要使用混合策略播放音频，你可以使用AVAudioSession类来设置音频会话的模式为AVAudioSessionCategoryAmbient，例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let session = AVAudioSession.sharedInstance()</span><br><span class="line">try session.setCategory(.ambient, mode: .default, options: [])</span><br><span class="line">try session.setActive(true)</span><br></pre></td></tr></table></figure>
<p>)<br>这个代码会将音频会话的模式设置为AVAudioSessionCategoryAmbient，从而使用混合策略播放音频。注意，这个代码只是示例，你需要根据你的具体情况进行修改。</p>
<p>一些相关参考：<br><a href="https://forum.gamemaker.io/index.php?threads/html5-web-audio-context-issues-on-ios.86787/">https://forum.gamemaker.io/index.php?threads/html5-web-audio-context-issues-on-ios.86787/</a><br><a href="https://github.com/WebAudio/web-audio-api/issues/2392">https://github.com/WebAudio/web-audio-api/issues/2392</a></p>
]]></content>
  </entry>
  <entry>
    <title>brew install graphviz 报错 The `brew link` step did not complete successfully The formula built, but is not symlinked into /usr/local Could not symlink include/graphviz /usr/local/include is not writable.</title>
    <url>/hexo-blog/2023/10/08/brew-install-graphviz-%E6%8A%A5%E9%94%99-The-brew-link-step-did-not-complete-successfully-The-formula-built-but-is-not-symlinked-into-usr-local-Could-not-symlink-include-graphviz-usr-local-include-is-not-writable/</url>
    <content><![CDATA[<p>权限问题, and没有include文件夹。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo mkdir include</span><br><span class="line">sudo chown -R `whoami`:admin /usr/local/include</span><br><span class="line">brew link graphviz</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>canvas-pie</title>
    <url>/hexo-blog/2016/05/18/canvas-pie/</url>
    <content><![CDATA[<h1 id="在-Canvas-上将数据画成饼图"><a href="#在-Canvas-上将数据画成饼图" class="headerlink" title="在 Canvas 上将数据画成饼图"></a>在 Canvas 上将数据画成饼图</h1><p>将这个功能封装成为一个 pie 对象，只需要将参数对象传递给 pie.init(config)函数，就能初始化 canvas，然后调用 pie.render()函数，饼图就画好啦。</p>
<span id="more"></span>

<p><canvas id="cas" height="600" width="600"></canvas></p>
<h2 id="使用方法："><a href="#使用方法：" class="headerlink" title="使用方法："></a>使用方法：</h2><ul>
<li>引入 pie.js 文件<br>最开始需要在你的代码前面引入 pie.js 文件，你可以放在 head 标签里面，也可以放在 body 底部其他 script 标签的前面。</li>
<li>获取 canvas 元素</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;cas&quot;</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>设置参数<br>准备好数据、图例和颜色（内置了 9 个颜色，数据数量小于 9 的话，不传颜色参数也可以啦~）</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> data = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">50</span>, <span class="number">100</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">70</span>, <span class="number">22</span>];</span><br><span class="line"><span class="keyword">var</span> legend = [<span class="string">&quot;C++&quot;</span>, <span class="string">&quot;Ruby&quot;</span>, <span class="string">&quot;Java&quot;</span>, <span class="string">&quot;JS&quot;</span>, <span class="string">&quot;Python&quot;</span>, <span class="string">&quot;R&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;D&quot;</span>];</span><br><span class="line"><span class="keyword">var</span> colors = [</span><br><span class="line">  <span class="string">&quot;#CCFFFF&quot;</span>,</span><br><span class="line">  <span class="string">&quot;#99CC66&quot;</span>,</span><br><span class="line">  <span class="string">&quot;#CCCCFF&quot;</span>,</span><br><span class="line">  <span class="string">&quot;#0099CC&quot;</span>,</span><br><span class="line">  <span class="string">&quot;#FF6600&quot;</span>,</span><br><span class="line">  <span class="string">&quot;#996699&quot;</span>,</span><br><span class="line">  <span class="string">&quot;#FFFF00&quot;</span>,</span><br><span class="line">  <span class="string">&quot;#FF6666&quot;</span></span><br><span class="line">];</span><br><span class="line"><span class="keyword">var</span> config = &#123;</span><br><span class="line">  <span class="attr">canvas</span>: canvas,</span><br><span class="line">  <span class="attr">series</span>: data,</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&quot;Coding language&quot;</span>,</span><br><span class="line">  <span class="attr">legend</span>: legend,</span><br><span class="line">  <span class="attr">tip</span>: &#123; <span class="attr">enable</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">  <span class="attr">colors</span>: colors</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>使用 pie 的初始化函数载入数据, 使用 pie.render()画图</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//调用pie的初始化函数</span></span><br><span class="line">pie.<span class="title function_">init</span>(config);</span><br><span class="line"><span class="comment">//绘制饼图</span></span><br><span class="line">pie.<span class="title function_">render</span>();</span><br></pre></td></tr></table></figure>

<h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p>pie.js 源码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 绘制饼图的对象</span></span><br><span class="line"><span class="keyword">var</span> pie = &#123;</span><br><span class="line">  <span class="attr">canvas</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">series</span>: [],</span><br><span class="line">  <span class="attr">legend</span>: [],</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&quot;Pie&quot;</span>,</span><br><span class="line">  <span class="attr">width</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">height</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">tip</span>: &#123;</span><br><span class="line">    <span class="attr">enable</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">canvas</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">ctx</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">index</span>: -<span class="number">1</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">radius</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">center</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">colors</span>: [</span><br><span class="line">    <span class="string">&quot;#FF6666&quot;</span>,</span><br><span class="line">    <span class="string">&quot;#CCFFFF&quot;</span>,</span><br><span class="line">    <span class="string">&quot;#99CC66&quot;</span>,</span><br><span class="line">    <span class="string">&quot;#CCCCFF&quot;</span>,</span><br><span class="line">    <span class="string">&quot;#0099CC&quot;</span>,</span><br><span class="line">    <span class="string">&quot;#FF6600&quot;</span>,</span><br><span class="line">    <span class="string">&quot;#996699&quot;</span>,</span><br><span class="line">    <span class="string">&quot;#FFFF00&quot;</span>,</span><br><span class="line">    <span class="string">&quot;#FFFF00&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">//初始化参数的函数</span></span><br><span class="line">  <span class="attr">init</span>: <span class="keyword">function</span>(<span class="params">config</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">canvas</span> = config.<span class="property">canvas</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">series</span> = config.<span class="property">series</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">legend</span> = config.<span class="property">legend</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">title</span> = config.<span class="property">title</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">width</span> = <span class="variable language_">this</span>.<span class="property">canvas</span>.<span class="property">width</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">height</span> = <span class="variable language_">this</span>.<span class="property">canvas</span>.<span class="property">height</span>;</span><br><span class="line">    <span class="keyword">if</span> (config.<span class="property">tip</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">tip</span>.<span class="property">enable</span> = config.<span class="property">tip</span>.<span class="property">enable</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">colors</span> = config.<span class="property">colors</span> || <span class="variable language_">this</span>.<span class="property">colors</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//获取 鼠标的绝对坐标(即使有滚动的情况下)</span></span><br><span class="line">  <span class="attr">getMousePos</span>: <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> e = event || <span class="variable language_">window</span>.<span class="property">event</span>;</span><br><span class="line">    <span class="keyword">var</span> scrollX =</span><br><span class="line">      <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollLeft</span> || <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">scrollLeft</span>;</span><br><span class="line">    <span class="keyword">var</span> scrollY = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollTop</span> || <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">scrollTop</span>;</span><br><span class="line">    <span class="keyword">var</span> x = e.<span class="property">pageX</span> || e.<span class="property">clientX</span> + scrollX;</span><br><span class="line">    <span class="keyword">var</span> y = e.<span class="property">pageY</span> || e.<span class="property">clientY</span> + scrollY;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">x</span>: x, <span class="attr">y</span>: y &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//函数去抖 即使在指定间隔内调用多次但是只执行一次</span></span><br><span class="line">  <span class="attr">debounce</span>: <span class="keyword">function</span>(<span class="params">fn, threshhold, scope</span>) &#123;</span><br><span class="line">    threshhold || (threshhold = <span class="number">32</span>); <span class="comment">//250ms是指定执行间隔</span></span><br><span class="line">    <span class="keyword">var</span> last, deferTimer;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> context = scope || <span class="variable language_">this</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> now = +<span class="keyword">new</span> <span class="title class_">Date</span>(),</span><br><span class="line">        args = <span class="variable language_">arguments</span>;</span><br><span class="line">      <span class="keyword">if</span> (last &amp;&amp; now &lt; last + threshhold) &#123;</span><br><span class="line">        <span class="comment">// hold on to it</span></span><br><span class="line">        <span class="built_in">clearTimeout</span>(deferTimer);</span><br><span class="line">        deferTimer = <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">          last = now; <span class="comment">//过了threshhold才会将该函数插入js进程队列，至少此后才会执行这一句</span></span><br><span class="line">          fn.<span class="title function_">apply</span>(context, args);</span><br><span class="line">        &#125;, threshhold);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        last = now;</span><br><span class="line">        fn.<span class="title function_">apply</span>(context, args);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//显示 tooltip的函数</span></span><br><span class="line">  <span class="attr">tipshow</span>: <span class="keyword">function</span>(<span class="params">position, ctx</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> canPos = <span class="variable language_">this</span>.<span class="title function_">getCanActPos</span>(<span class="variable language_">this</span>.<span class="property">canvas</span>);</span><br><span class="line">    <span class="keyword">var</span> rPos = &#123;&#125;;</span><br><span class="line">    rPos.<span class="property">x</span> = position.<span class="property">x</span> - canPos.<span class="property">x</span> - <span class="variable language_">this</span>.<span class="property">center</span>.<span class="property">x</span>;</span><br><span class="line">    rPos.<span class="property">y</span> = position.<span class="property">y</span> - canPos.<span class="property">y</span> - <span class="variable language_">this</span>.<span class="property">center</span>.<span class="property">y</span>;</span><br><span class="line">    rPos.<span class="property">dis</span> = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">sqrt</span>(rPos.<span class="property">x</span> * rPos.<span class="property">x</span> + rPos.<span class="property">y</span> * rPos.<span class="property">y</span>));</span><br><span class="line">    <span class="keyword">if</span> (rPos.<span class="property">dis</span> &lt; <span class="variable language_">this</span>.<span class="property">radius</span>) &#123;</span><br><span class="line">      rPos.<span class="property">arc</span> = <span class="title class_">Math</span>.<span class="title function_">atan2</span>(rPos.<span class="property">y</span>, rPos.<span class="property">x</span>);</span><br><span class="line">      <span class="keyword">if</span> (rPos.<span class="property">arc</span> &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        rPos.<span class="property">arc</span> += <span class="title class_">Math</span>.<span class="property">PI</span> * <span class="number">2</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">var</span> sum = <span class="variable language_">this</span>.<span class="property">series</span>.<span class="title function_">reduce</span>(<span class="keyword">function</span>(<span class="params">pre, cur</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> pre + cur;</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">var</span> percent = <span class="variable language_">this</span>.<span class="property">series</span>.<span class="title function_">map</span>(<span class="keyword">function</span>(<span class="params">item</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> item / sum;</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">var</span> perArc = percent.<span class="title function_">map</span>(<span class="keyword">function</span>(<span class="params">item</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> item * <span class="title class_">Math</span>.<span class="property">PI</span> * <span class="number">2</span>;</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">var</span> curArc = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">var</span> curIndex = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">var</span> len = <span class="variable language_">this</span>.<span class="property">series</span>.<span class="property">length</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        curArc += perArc[i];</span><br><span class="line">        <span class="keyword">if</span> (rPos.<span class="property">arc</span> &lt; curArc) &#123;</span><br><span class="line">          curIndex = i;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">tip</span>.<span class="property">canvas</span> === <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">tip</span>.<span class="property">canvas</span> = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;canvas&quot;</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">tip</span>.<span class="property">canvas</span>.<span class="property">id</span> = <span class="string">&quot;tip&quot;</span>;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(<span class="variable language_">this</span>.<span class="property">tip</span>.<span class="property">canvas</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">tip</span>.<span class="property">canvas</span>.<span class="property">style</span>.<span class="property">position</span> = <span class="string">&quot;absolute&quot;</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">tip</span>.<span class="property">canvas</span>.<span class="property">style</span>.<span class="property">left</span> = position.<span class="property">x</span> + <span class="number">20</span> + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">tip</span>.<span class="property">canvas</span>.<span class="property">style</span>.<span class="property">top</span> = position.<span class="property">y</span> + <span class="number">20</span> + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">tip</span>.<span class="property">canvas</span>.<span class="property">style</span>.<span class="property">zIndex</span> = <span class="number">2</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">tip</span>.<span class="property">canvas</span>.<span class="property">height</span> = <span class="number">50</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">tip</span>.<span class="property">canvas</span>.<span class="property">width</span> = <span class="number">100</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">tip</span>.<span class="property">ctx</span> = <span class="variable language_">this</span>.<span class="property">tip</span>.<span class="property">canvas</span>.<span class="title function_">getContext</span>(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">tip</span>.<span class="property">canvas</span>.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&quot;block&quot;</span>;</span><br><span class="line">      <span class="keyword">var</span> tctx = <span class="variable language_">this</span>.<span class="property">tip</span>.<span class="property">ctx</span>;</span><br><span class="line">      tctx.<span class="title function_">clearRect</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="variable language_">this</span>.<span class="property">tip</span>.<span class="property">canvas</span>.<span class="property">width</span>, <span class="variable language_">this</span>.<span class="property">tip</span>.<span class="property">canvas</span>.<span class="property">height</span>);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">tip</span>.<span class="property">canvas</span>.<span class="property">style</span>.<span class="property">left</span> = position.<span class="property">x</span> + <span class="number">20</span> + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">tip</span>.<span class="property">canvas</span>.<span class="property">style</span>.<span class="property">top</span> = position.<span class="property">y</span> + <span class="number">20</span> + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">      tctx.<span class="property">fillStyle</span> = <span class="string">&quot;rgba(200,200,200,0.6)&quot;</span>;</span><br><span class="line">      tctx.<span class="title function_">fillRect</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="variable language_">this</span>.<span class="property">tip</span>.<span class="property">canvas</span>.<span class="property">width</span>, <span class="variable language_">this</span>.<span class="property">tip</span>.<span class="property">canvas</span>.<span class="property">height</span>);</span><br><span class="line">      tctx.<span class="property">fillStyle</span> = <span class="string">&quot;#000&quot;</span>;</span><br><span class="line">      tctx.<span class="property">font</span> = <span class="string">&quot;15px bold Arail&quot;</span>;</span><br><span class="line">      <span class="comment">// tctx.textBaseLine=&quot;top&quot;;</span></span><br><span class="line">      tctx.<span class="title function_">fillText</span>((percent[curIndex] * <span class="number">100</span>).<span class="title function_">toFixed</span>(<span class="number">2</span>) + <span class="string">&quot;%&quot;</span>, <span class="number">20</span>, <span class="number">40</span>);</span><br><span class="line">      tctx.<span class="title function_">fillText</span>(<span class="variable language_">this</span>.<span class="property">legend</span>[curIndex], <span class="number">20</span>, <span class="number">20</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">tip</span>.<span class="property">canvas</span> != <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">tip</span>.<span class="property">canvas</span>.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&quot;none&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//饼图的绘制函数</span></span><br><span class="line">  <span class="attr">render</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> center = &#123;</span><br><span class="line">      <span class="attr">x</span>: <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="variable language_">this</span>.<span class="property">width</span> / <span class="number">2</span>),</span><br><span class="line">      <span class="attr">y</span>: <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="variable language_">this</span>.<span class="property">height</span> / <span class="number">2</span>)</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">center</span> = center;</span><br><span class="line">    <span class="keyword">var</span> edge = <span class="number">50</span>;</span><br><span class="line">    <span class="keyword">var</span> ctx = <span class="variable language_">this</span>.<span class="property">canvas</span>.<span class="title function_">getContext</span>(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> radius = <span class="title class_">Math</span>.<span class="title function_">min</span>(center.<span class="property">x</span>, center.<span class="property">y</span>) - edge * <span class="number">2</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">radius</span> = radius;</span><br><span class="line">    <span class="keyword">var</span> sum = <span class="variable language_">this</span>.<span class="property">series</span>.<span class="title function_">reduce</span>(<span class="keyword">function</span>(<span class="params">pre, cur</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> pre + cur;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">var</span> percent = <span class="variable language_">this</span>.<span class="property">series</span>.<span class="title function_">map</span>(<span class="keyword">function</span>(<span class="params">item</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> item / sum;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">var</span> perArc = percent.<span class="title function_">map</span>(<span class="keyword">function</span>(<span class="params">item</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> item * <span class="title class_">Math</span>.<span class="property">PI</span> * <span class="number">2</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">var</span> curArc = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> len = <span class="variable language_">this</span>.<span class="property">series</span>.<span class="property">length</span>;</span><br><span class="line">    ctx.<span class="title function_">save</span>();</span><br><span class="line">    ctx.<span class="property">strokeStyle</span> = <span class="string">&quot;#000&quot;</span>;</span><br><span class="line">    <span class="comment">//drawpie</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">      ctx.<span class="title function_">beginPath</span>();</span><br><span class="line">      ctx.<span class="title function_">arc</span>(center.<span class="property">x</span>, center.<span class="property">y</span>, radius, curArc, curArc + perArc[i]);</span><br><span class="line">      ctx.<span class="title function_">lineTo</span>(center.<span class="property">x</span>, center.<span class="property">y</span>);</span><br><span class="line">      ctx.<span class="title function_">closePath</span>();</span><br><span class="line">      ctx.<span class="property">fillStyle</span> = <span class="variable language_">this</span>.<span class="property">colors</span>[i];</span><br><span class="line">      ctx.<span class="title function_">fill</span>();</span><br><span class="line">      curArc = curArc + perArc[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//legend</span></span><br><span class="line">    ctx.<span class="property">font</span> = <span class="string">&quot;15px bold Arail&quot;</span>;</span><br><span class="line">    <span class="comment">// ctx.textBaseLine=&quot;bottom&quot;;</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">      ctx.<span class="property">fillStyle</span> = <span class="variable language_">this</span>.<span class="property">colors</span>[i];</span><br><span class="line">      ctx.<span class="title function_">fillRect</span>(<span class="variable language_">this</span>.<span class="property">width</span> - <span class="number">2</span> * edge + <span class="number">5</span>, <span class="number">20</span> * i, <span class="number">15</span>, <span class="number">15</span>);</span><br><span class="line">      ctx.<span class="property">fillStyle</span> = <span class="string">&quot;#000&quot;</span>;</span><br><span class="line">      ctx.<span class="title function_">fillText</span>(<span class="variable language_">this</span>.<span class="property">legend</span>[i], <span class="variable language_">this</span>.<span class="property">width</span> - <span class="number">2</span> * edge + <span class="number">25</span>, <span class="number">20</span> * i + <span class="number">15</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//title</span></span><br><span class="line">    ctx.<span class="property">textAlign</span> = <span class="string">&quot;center&quot;</span>;</span><br><span class="line">    ctx.<span class="title function_">fillText</span>(<span class="variable language_">this</span>.<span class="property">title</span>, center.<span class="property">x</span>, edge - <span class="number">20</span>);</span><br><span class="line">    <span class="comment">//tooltip</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">tip</span>.<span class="property">enable</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> mousePos = &#123; <span class="attr">x</span>: <span class="number">0</span>, <span class="attr">y</span>: <span class="number">0</span> &#125;;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">canvas</span>.<span class="title function_">addEventListener</span>(</span><br><span class="line">        <span class="string">&quot;mousemove&quot;</span>,</span><br><span class="line">        pie.<span class="title function_">debounce</span>(<span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">          <span class="comment">// e = e || window.event;</span></span><br><span class="line">          <span class="comment">// mousePos.x = e.clientX;</span></span><br><span class="line">          <span class="comment">// mousePos.y = e.clientY;</span></span><br><span class="line">          mousePos = pie.<span class="title function_">getMousePos</span>(e);</span><br><span class="line">          pie.<span class="property">tipshow</span>.<span class="title function_">apply</span>(pie, [mousePos, ctx]);</span><br><span class="line">        &#125;, <span class="literal">false</span>)</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//获取canvas的绝对坐标</span></span><br><span class="line">  <span class="attr">getCanActPos</span>: <span class="keyword">function</span>(<span class="params">element</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> actualLeft = element.<span class="property">offsetLeft</span>;</span><br><span class="line">    <span class="keyword">var</span> actualTop = element.<span class="property">offsetTop</span>;</span><br><span class="line">    <span class="keyword">var</span> current = element.<span class="property">offsetParent</span>;</span><br><span class="line">    <span class="keyword">while</span> (current !== <span class="literal">null</span>) &#123;</span><br><span class="line">      actualLeft += current.<span class="property">offsetLeft</span>;</span><br><span class="line">      actualTop += current.<span class="property">offsetTop</span>;</span><br><span class="line">      current = current.<span class="property">offsetParent</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">x</span>: actualLeft, <span class="attr">y</span>: actualTop &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<script src="pie.js" type="text/javascript"></script>
<script>
    var canvas = document.getElementById("cas");
    // var ctx = canvas.getContext("2d");
    var data = [10,20,50,100,30,40,70,22];
    var legend=["C++","Ruby","Java","JS","Python","R","C","D"];
    var colors=["#CCFFFF",'#99CC66','#CCCCFF','#0099CC',"#FF6600",'#996699','#FFFF00',"#FF6666"]
    var config={
        canvas:canvas,
        series:data,
        title:"Coding language",
        legend:legend,
        tip:{enable:true},
        colors:colors
    }
    //调用pie的初始化函数
    pie.init(config);
    //绘制饼图
    pie.render();
</script>
]]></content>
      <tags>
        <tag>canvas</tag>
        <tag>chart</tag>
        <tag>pie</tag>
      </tags>
  </entry>
  <entry>
    <title>charles-install-and-usage</title>
    <url>/hexo-blog/2017/06/20/charles-install-and-usage/</url>
    <content><![CDATA[<h1 id="Charles安装破解使用教程"><a href="#Charles安装破解使用教程" class="headerlink" title="Charles安装破解使用教程"></a>Charles安装破解使用教程</h1><h4 id="Charles-是什么，能干啥"><a href="#Charles-是什么，能干啥" class="headerlink" title="Charles 是什么，能干啥"></a>Charles 是什么，能干啥</h4><p>Charles是一个对Mac系统非常友好的抓包工具（付费），使用场景包括线上&#x2F;测试&#x2F;本地&#x2F;接口的代理，在APP里测试本地页面，手机同域host代理。</p>
<span id="more"></span>

<h4 id="安装-amp-破解"><a href="#安装-amp-破解" class="headerlink" title="安装&amp;破解"></a>安装&amp;破解</h4><ol>
<li>下载安装包</li>
<li>下载对应版本破解文件charles.jar，并替换掉原文件夹里的charles.jar</li>
</ol>
<p>update 17&#x2F;06&#x2F;19: <a href="http://charles.iiilab.com/">破解参考</a></p>
<h4 id="开启代理"><a href="#开启代理" class="headerlink" title="开启代理"></a>开启代理</h4><p>依次点击 Proxy &gt; macOS Proxy</p>
<img src="/hexo-blog/2017/06/20/charles-install-and-usage/open-proxy.png" class="" title="open-proxy">

<p>默认是127.0.0.1 8888端口</p>
<h4 id="PC抓包"><a href="#PC抓包" class="headerlink" title="PC抓包"></a>PC抓包</h4><p>此时打开任意浏览器，访问网址，就可以在charles里面看到发出的请求了。界面有两种显示方式：Structure 和Sequence，前者按照域名的路径结构树罗列请求，后者按照时间显示每一个请求，可以按照自己的需求自行选择喜欢的查看方式。顶部的按钮是一些常用功能，左起第一个扫帚button功能是清空请求记录，第二个红色录制button的功能是开始&#x2F;停止抓包的切换。在content标签页可以查看某个请求的详细信息，包括cookies，query等。Sequence<br>显示界面有filter输入框可以过滤出你想要查看的请求。</p>
<img src="/hexo-blog/2017/06/20/charles-install-and-usage/structure-content.png" class="" title="structure-content">


<h4 id="手机抓包"><a href="#手机抓包" class="headerlink" title="手机抓包"></a>手机抓包</h4><p>在手机上设置当前wifi为手动代理，host为charles所在pc的ip，端口8888。这样手机的所有请求就会被charles捕获到。同时，我们经常在开发中为了带上cookie、避免跨域将本机host修改为test.XXXX.com，手机通过charles代理后，就免去了在手机上修改host的麻烦，直接可以访问电脑上可以访问的内容。</p>
<h4 id="https抓包"><a href="#https抓包" class="headerlink" title="https抓包"></a>https抓包</h4><h5 id="charles设置SSL代理"><a href="#charles设置SSL代理" class="headerlink" title="charles设置SSL代理"></a>charles设置SSL代理</h5><p>Proxy &gt;SL Proxying Setting &gt; Enable SSL Proxying</p>
<img src="/hexo-blog/2017/06/20/charles-install-and-usage/open-ssl.png" class="" title="open-ssl">

<p>弹出ssl编辑窗口，将enable ssl Proxying勾选上</p>
<img src="/hexo-blog/2017/06/20/charles-install-and-usage/ssl-proxying.jpeg" class="" title="ssl-proxying">

<p>点击add按钮，添加新的规则，我们粗暴的设置为匹配任何域名的443端口，当然你可以指定抓取某个域名下的https请求</p>
<img src="/hexo-blog/2017/06/20/charles-install-and-usage/edit-location.jpeg" class="" title="edit-location">
<p>点击add按钮，添加新的规则，我们粗暴的设置为匹配任何域名的443端口，当然你可以指定抓取某个域名下的https请求</p>
<img src="/hexo-blog/2017/06/20/charles-install-and-usage/edit-location.jpeg" class="" title="edit-location">

<h5 id="PC安装证书"><a href="#PC安装证书" class="headerlink" title="PC安装证书"></a>PC安装证书</h5><p>Help &gt; SSL Proxying &gt; install Charles Root certificate 添加证书</p>
<img src="/hexo-blog/2017/06/20/charles-install-and-usage/install-ca-on-pc.png" class="" title="install-ca-on-pc">

<p>选择始终信任该证书</p>
<img src="/hexo-blog/2017/06/20/charles-install-and-usage/charles-ca-m.png" class="" title="charles-ca-m">

<h5 id="手机安装证书"><a href="#手机安装证书" class="headerlink" title="手机安装证书"></a>手机安装证书</h5><ol>
<li>手机访问 <code>http://chls.pro/ssl</code> 下载证书。</li>
<li>IOS 10.3以前的版本需要在 设置 &gt; 通用 &gt; 描述文件与设备管理  验证描述文件</li>
<li>IOS 10.3 以后的版本还要在 设置 &gt; 通用 &gt; 关于本机 &gt; 证书信任设置 &gt; 找到 charlesCA 然后信任该证书</li>
</ol>
<h4 id="Map-Remote"><a href="#Map-Remote" class="headerlink" title="Map Remote"></a>Map Remote</h4><p>这是我最喜欢的一个功能，简单说就是将任何请求映射到你想要的请求，可以是:</p>
<ul>
<li>本地服务-&gt;远程，test.XXXX.com&#x2F;api&#x2F;get  -&gt; online.XXXX.com&#x2F;api&#x2F;get</li>
<li>远程-&gt;远程, online1.XXXX.com&#x2F;api&#x2F;get  -&gt; online2.XXXX.com&#x2F;api2&#x2F;get2</li>
<li>文件-&gt;文件，online.XXXX.com&#x2F;index.html  -&gt; test.XXXX.com&#x2F;index.html</li>
<li>正则匹配路径-&gt;指定路径，test.XXXX.com&#x2F;api&#x2F;*  -&gt; online.XXXX.com&#x2F;api&#x2F;</li>
</ul>
<p>因此可以自由地实现很多功能, 本地开发使用线上API；线上地址访问本地开发代码调试bug；在APP中访问本地开发服务。<br>相对应的Charles提供Map Local 功能，使用方法与Map Remote类似，只不过是将远程服务映射到本地绝对路径，不需要本地启服务。</p>
<h5 id="开启-Map-Remote"><a href="#开启-Map-Remote" class="headerlink" title="开启 Map Remote"></a>开启 Map Remote</h5><p>Tools &gt; Map Remote</p>
<img src="/hexo-blog/2017/06/20/charles-install-and-usage/open-map-remote.png" class="" title="open-map-remote">

<p>弹出设置窗口，勾选enable map remote，点击add按钮添加规则。</p>
<img src="/hexo-blog/2017/06/20/charles-install-and-usage/edit-map-remote.png" class="" title="edit-map-remote">

<p>Map from 是你想要匹配映射的地址，设置协议，域名，端口，路径，query等，Map to 是映射的目标网址，就是你真正想要访问的地址，灵活配置，就能实现多种功能。</p>
]]></content>
      <tags>
        <tag>Charles</tag>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>electron-app-icon-generate</title>
    <url>/hexo-blog/2019/06/18/electron-app-icon-generate/</url>
    <content><![CDATA[<h1 id="electron客户端生成Mac和Win平台的App图标"><a href="#electron客户端生成Mac和Win平台的App图标" class="headerlink" title="electron客户端生成Mac和Win平台的App图标"></a>electron客户端生成Mac和Win平台的App图标</h1><p>mac的图标是需要.icns格式的，windows平台是.ico格式，这些格式，都可以通过命令行或者软件iConvert Icons生成。</p>
<span id="more"></span>

<h2 id="mac-图标"><a href="#mac-图标" class="headerlink" title="mac 图标"></a>mac 图标</h2><ul>
<li><p>原材料，不同尺寸的png格式图片在一个文件夹内，这个需要UI来生产，尺寸从16x16到256x256。</p>
</li>
<li><p>文件夹重命名为icon.iconset</p>
</li>
<li><p>每个文件重命名为icon_16x16.png格式的名字</p>
</li>
<li><p>命令行打开到icon.iconset的上级目录，执行命令</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">iconutil -c icns icon.iconset</span><br></pre></td></tr></table></figure>

<p>  就会生成icns文件了。</p>
</li>
</ul>
<h2 id="windows-图标，工具iConvert-Icon"><a href="#windows-图标，工具iConvert-Icon" class="headerlink" title="windows 图标，工具iConvert Icon"></a>windows 图标，工具iConvert Icon</h2><p>使用工具iConvert Icon，选择ico格式就可以。</p>
<ul>
<li><p>下载安装iConvert Icon</p>
</li>
<li><p>打开 iConvert Icon，勾选ico选项<br><img src="https://note.youdao.com/yws/api/personal/file/WEBb85ffbc2e84f01fa6d4800b5c0474a82?method=download&shareKey=2d5063599f7ee1731b91ff6f9261beda" alt="image"></p>
</li>
<li><p>把准备好的图片推到左边虚线方框内</p>
</li>
<li><p>保存生成的ico文件</p>
</li>
</ul>
<h2 id="遇到过的问题"><a href="#遇到过的问题" class="headerlink" title="遇到过的问题"></a>遇到过的问题</h2><p>mac在外接2k显示器上，使用列表模式显示图标，图标花掉，后来尝试丢掉1024和512大小的图标重新生成icns文件，好了。</p>
]]></content>
      <tags>
        <tag>electron</tag>
        <tag>mac</tag>
        <tag>windows</tag>
        <tag>icon</tag>
      </tags>
  </entry>
  <entry>
    <title>electron-dl 库的download方法在断网情况下，promise不会reject</title>
    <url>/hexo-blog/2023/10/13/electron-dl-%E5%BA%93%E7%9A%84download%E6%96%B9%E6%B3%95%E5%9C%A8%E6%96%AD%E7%BD%91%E6%83%85%E5%86%B5%E4%B8%8B%EF%BC%8Cpromise%E4%B8%8D%E4%BC%9Areject-1/</url>
    <content><![CDATA[<p>这个问题是他们库的实现上缺少功能，目前只能自己再包一层promise，手动监听一下 downloadItem的updated事件，如果state是injected，就reject</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">item.on(&#x27;updated&#x27;, (event, state) =&gt; &#123;</span><br><span class="line">      if (state === &#x27;interrupted&#x27;) &#123;</span><br><span class="line">             reject(new Error(&#x27;download failed&#x27;))</span><br><span class="line">      &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>electron-starter-guide</title>
    <url>/hexo-blog/2019/06/06/electron-starter-guide/</url>
    <content><![CDATA[<h1 id="Electron-入门笔记"><a href="#Electron-入门笔记" class="headerlink" title="Electron 入门笔记"></a>Electron 入门笔记</h1><h2 id="Electron简介"><a href="#Electron简介" class="headerlink" title="Electron简介"></a>Electron简介</h2><p>这个框架可以让你使用javascript开发Mac，Windows，Linux客户端。基本上可以理解为一个你自己的浏览器，访问本地的页面；而超出浏览器的部分是，你可以使用node拥有的能力。</p>
<h3 id="Runtime-运行时"><a href="#Runtime-运行时" class="headerlink" title="Runtime 运行时"></a>Runtime 运行时</h3><p>Electron凭什么可以让js拥有开发客户端的能力？这就要从js的运行时说起，什么是运行时呢？</p>
<blockquote>
<p>Js runtime就是用来执行JavaScript代码用的，为其提供了一个运行时环境，提供解释&#x2F;编译、自动内存管理（GC）、对象模型、核心库API等功能。</p>
</blockquote>
<p>我们熟悉的两个运行时分别是浏览器和Node</p>
<h4 id="浏览器运行时"><a href="#浏览器运行时" class="headerlink" title="浏览器运行时"></a>浏览器运行时</h4><p><img src="https://note.youdao.com/yws/api/personal/file/WEB60e1ec058d34cc2a9828a6846695eb63?method=download&shareKey=66db5604d56f2602a7a431b5ed92b9e3" alt="image"></p>
<p>前端开发最基本的就是运行在浏览器中的html、js，简单的提供可视化的UI和交互给用户，但是所有的一切，都是局限于浏览器内的，换句话说你最多只能做浏览器允许你做的事情，前端页面无法绕过浏览器直接在你的电脑里搞事情。而浏览器是一个沙盒环境。</p>
<h4 id="Node-运行时"><a href="#Node-运行时" class="headerlink" title="Node 运行时"></a>Node 运行时</h4><h2 id="开始开发需要什么"><a href="#开始开发需要什么" class="headerlink" title="开始开发需要什么"></a>开始开发需要什么</h2><h3 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h3><p>官方文档：<a href="https://electronjs.org/docs">https://electronjs.org/docs</a><br>中文资料集合：<a href="https://github.com/amhoho/electron-cn-docs">https://github.com/amhoho/electron-cn-docs</a><br>electron英文资料大集合： <a href="https://github.com/sindresorhus/awesome-electron">https://github.com/sindresorhus/awesome-electron</a></p>
<span id="more"></span>

<h3 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h3><ul>
<li>快速开始demo：<a href="https://github.com/electron/electron-quick-start">https://github.com/electron/electron-quick-start</a></li>
<li>官方的APIdemo：<a href="https://github.com/electron/electron-api-demos">https://github.com/electron/electron-api-demos</a></li>
<li>官方typescript的demo： <a href="https://github.com/electron/electron-quick-start-typescript">https://github.com/electron/electron-quick-start-typescript</a></li>
</ul>
<p>由于我最终选择的架构是ts+react，因此，可以参考这两个模板：</p>
<ul>
<li>electron的react模板： <a href="https://github.com/electron-react-boilerplate/electron-react-boilerplate">https://github.com/electron-react-boilerplate/electron-react-boilerplate</a></li>
<li>electron的react + ts样例：<a href="https://github.com/electron-react-boilerplate/examples/tree/master/examples/typescript">https://github.com/electron-react-boilerplate/examples/tree/master/examples/typescript</a></li>
</ul>
<h3 id="主进程和渲染进程"><a href="#主进程和渲染进程" class="headerlink" title="主进程和渲染进程"></a>主进程和渲染进程</h3><p>这是跟web开发最大的不同点，electron的入口文件的进程是主进程, 在主进程中，你可以像在node环境一样开发，操作本地文件，主进程可以创建渲染进程，渲染进程就是展示我们看到的UI页面的的，可以理解为我们浏览器页面，因此我们使用React写的组件啊实际上实在渲染进程中运行的。</p>
<h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><h3 id="拦截electron渲染进程中网页的伪协议请求"><a href="#拦截electron渲染进程中网页的伪协议请求" class="headerlink" title="拦截electron渲染进程中网页的伪协议请求"></a>拦截electron渲染进程中网页的伪协议请求</h3><p>我们知道在传统的ios和android的客户端hybrid开发中，是可以跟客户端约定伪协议进行单方向通信的。那么在electron中，如何做到这一点呢，可以让外部网页与electron主进程通信。那就要使用electron的protocol模块。在主进程中，注册协议</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 拦截协议</span></span><br><span class="line">protocol.<span class="title function_">registerHttpProtocol</span>(<span class="string">&#x27;gayhub&#x27;</span>, <span class="function">(<span class="params">request, callback</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;protocol url:&#x27;</span>, url)</span><br><span class="line">  <span class="comment">// 打开electron的默认render之类的</span></span><br><span class="line">  mainWindow.<span class="title function_">loadURL</span>(<span class="string">`file://<span class="subst">$&#123;__dirname&#125;</span>/app.html`</span>);</span><br><span class="line">&#125;, <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (error) <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Failed to register protocol&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>这样我们在render进程渲染的网页如果有一个a标签</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;gayhub://home&quot;</span>&gt;</span>去往electron客户端的首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="在electron外的浏览器使用deeplink唤起electron客户端"><a href="#在electron外的浏览器使用deeplink唤起electron客户端" class="headerlink" title="在electron外的浏览器使用deeplink唤起electron客户端"></a>在electron外的浏览器使用deeplink唤起electron客户端</h3><p>就比如我们在网页版的百度网盘，点击下载的时候，浏览器会弹窗提示要打开百度网盘的客户端吗？electron也可以实现这样的效果。<br>在主进程中，</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 注册deeplink唤起</span></span><br><span class="line"><span class="comment">// https://electronjs.org/docs/api/app#appsetasdefaultprotocolclientprotocol-path-args</span></span><br><span class="line">app.<span class="title function_">setAsDefaultProtocolClient</span>(<span class="string">&#x27;gayhub&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>如果使用的是electron-builder打包的情况，在package.json中增加，</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">&quot;protocols&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gayhub&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;schemes&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="string">&quot;gayhub&quot;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>这样，安装了我们打包的App之后，我们在浏览器的地址栏中输入 <code>gayhub://</code>, 就会有弹窗询问是否打开本地的客户端。</p>
<h3 id="在electron中使用devTools"><a href="#在electron中使用devTools" class="headerlink" title="在electron中使用devTools"></a>在electron中使用devTools</h3><p>既然electron这么像一个浏览器，那么我们能不能也像浏览器一样开启devTools呢？可以的。<br>参考<a href="https://electronjs.org/docs/tutorial/devtools-extension">文档</a>,使用 <code>electron-devtools-installer</code></p>
<p>在app的ready事件回调中，安装devTool扩展程序，比如react，redux。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 扩展程序安装函数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">installExtensions</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> installer = <span class="built_in">require</span>(<span class="string">&#x27;electron-devtools-installer&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> forceDownload = !!process.<span class="property">env</span>.<span class="property">UPGRADE_EXTENSIONS</span>;</span><br><span class="line">  <span class="comment">// react 和 redux 扩展</span></span><br><span class="line">  <span class="keyword">const</span> extensions = [<span class="string">&#x27;REACT_DEVELOPER_TOOLS&#x27;</span>, <span class="string">&#x27;REDUX_DEVTOOLS&#x27;</span>];</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>(</span><br><span class="line">    extensions.<span class="title function_">map</span>(<span class="function"><span class="params">name</span> =&gt;</span> installer.<span class="title function_">default</span>(installer[name], forceDownload))</span><br><span class="line">  ).<span class="title function_">catch</span>(<span class="variable language_">console</span>.<span class="property">log</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主进程app ready事件</span></span><br><span class="line">app.<span class="title function_">on</span>(<span class="string">&#x27;ready&#x27;</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      <span class="comment">// 仅在开发模式和debug生产模式安装扩展程序</span></span><br><span class="line">      process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;development&#x27;</span> ||</span><br><span class="line">      process.<span class="property">env</span>.<span class="property">DEBUG_PROD</span> === <span class="string">&#x27;true&#x27;</span></span><br><span class="line">    ) &#123;</span><br><span class="line">      <span class="comment">// 同步安装扩展程序</span></span><br><span class="line">      <span class="keyword">await</span> <span class="title function_">installExtensions</span>();</span><br><span class="line">      <span class="comment">// 注册快捷键</span></span><br><span class="line">      globalShortcut.<span class="title function_">register</span>(<span class="string">&#x27;Alt+CommandOrControl+I&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 跟Chrome一样 Command Option I 打开devtool</span></span><br><span class="line">        <span class="title class_">BrowserWindow</span>.<span class="title function_">getFocusedWindow</span>().<span class="property">webContents</span>.<span class="title function_">toggleDevTools</span>();</span><br><span class="line">      &#125;);</span><br><span class="line">      globalShortcut.<span class="title function_">register</span>(<span class="string">&#x27;CommandOrControl+R&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">         <span class="comment">// 跟Chrome一样 Command R 刷新页面</span></span><br><span class="line">        <span class="title class_">BrowserWindow</span>.<span class="title function_">getFocusedWindow</span>().<span class="property">webContents</span>.<span class="title function_">reload</span>();</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="开启webview的devTools"><a href="#开启webview的devTools" class="headerlink" title="开启webview的devTools"></a>开启webview的devTools</h3><p>electron是允许使用<code>&lt;webview/&gt;</code>标签来加载网页的，那么如果webview的网页出了问题，我们当然是想debug一下的。webview也可以使用devTools来debug，那么如何开启呢？很简单，只需要执行webview对象的openDevTool()方法就可以了。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;webview&#x27;</span>).<span class="title function_">openDevTools</span>()</span><br></pre></td></tr></table></figure>

<h3 id="webview如何安全执行nodeApi"><a href="#webview如何安全执行nodeApi" class="headerlink" title="webview如何安全执行nodeApi"></a>webview如何安全执行nodeApi</h3><p>ELectron给我们提供了使用Node的权限，同时也增加了风险，网页被攻击不仅可以影响浏览器的数据，也可以通过node访问文件系统shell等。官方处于安全性考虑，是不建议开启webview的nodeApi的访问权限的，但是我们可以通过preload给webview注入脚本，在脚本中我们可以暴露一些包装好的使用nodeApi的方法给webview使用。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 关闭node访问权限</span></span><br><span class="line">nodeIntegration = <span class="literal">false</span></span><br><span class="line"><span class="comment">// 不要开启上下文隔离，开启后webiew作用域无法访问preload定义的变量</span></span><br><span class="line">contextIsolation = <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p>这样在preload的js中，我们可以这样来跟electron通信</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; ipcRenderer, shell &#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">EDK</span> = &#123;</span><br><span class="line">  <span class="comment">// 通过webview元素与render进程通信</span></span><br><span class="line">  <span class="title function_">back</span>(<span class="params"></span>) &#123;</span><br><span class="line">    ipcRenderer.<span class="title function_">sendToHost</span>(<span class="string">&#x27;history:back&#x27;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 在默认浏览器中打开链接</span></span><br><span class="line">  <span class="title function_">openInBrowser</span>(<span class="params">url</span>) &#123;</span><br><span class="line">    shell.<span class="title function_">openExternal</span>(url);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">global</span>.<span class="property">EDK</span> = <span class="variable constant_">EDK</span>;</span><br></pre></td></tr></table></figure>

<h3 id="打开客户端默认全屏显示和控制"><a href="#打开客户端默认全屏显示和控制" class="headerlink" title="打开客户端默认全屏显示和控制"></a>打开客户端默认全屏显示和控制</h3><h4 id="全屏显示"><a href="#全屏显示" class="headerlink" title="全屏显示"></a>全屏显示</h4><p>在<code>new BrowserWindow</code> 的时候，设置全屏参数</p>
<blockquote>
<p>fullscreen</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 全屏打开</span></span><br><span class="line">mainWindow = <span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(&#123;</span><br><span class="line">  <span class="attr">width</span>: <span class="number">1024</span>,</span><br><span class="line">  <span class="attr">height</span>: <span class="number">728</span>,</span><br><span class="line">  <span class="attr">resizable</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">fullscreen</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>注意到文档中还有另外一个参数</p>
<blockquote>
<p>simpleFullscreen</p>
</blockquote>
<p>有什么区别呢？</p>
<ul>
<li>fullscreen 在 mac下是一般意义上的全屏，会新开一个mac的全屏窗口，没有dock，鼠标移动到顶部，系统的菜单栏会显示出来，同时带有绿色toggle全屏按钮的标题栏也会显示出来。</li>
<li>simpleFullscreen在mac中表现，更类似于最大化，他是在当前的主窗口最大化，本屏幕窗口打开的app都还在这个窗口，dock是可见的，鼠标移动到顶部，系统的菜单栏会显示出来，但是没有标题栏。</li>
</ul>
<p>对比之下，fullscreen是我们想要的效果</p>
<h4 id="禁止退出全屏"><a href="#禁止退出全屏" class="headerlink" title="禁止退出全屏"></a>禁止退出全屏</h4><p>new BrowserWindow 有另一个参数</p>
<blockquote>
<p>fullscreenable<br>它的官方说明是： 窗口是否可以进入全屏状态. 在 macOS上, 最大化&#x2F;缩放按钮是否可用 。</p>
</blockquote>
<p>于是我在设置了fullscreen&#x3D;true的条件下，设置fullscreenable为false。</p>
<p>结果： 窗口是禁止最大化toggle按钮了，但是打开也不是默认最大化的。这显然不是我需要的，看起来这两个参数同时设置有冲突。</p>
<h5 id="先全屏，再禁止最大化"><a href="#先全屏，再禁止最大化" class="headerlink" title="先全屏，再禁止最大化"></a>先全屏，再禁止最大化</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 全屏打开</span></span><br><span class="line">mainWindow = <span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(&#123;</span><br><span class="line">  <span class="attr">width</span>: <span class="number">1024</span>,</span><br><span class="line">  <span class="attr">height</span>: <span class="number">728</span>,</span><br><span class="line">  <span class="attr">resizable</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">fullscreen</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 禁用最大化/缩放按钮</span></span><br><span class="line">mainWindow.<span class="title function_">setFullScreenable</span>(<span class="literal">false</span>)</span><br></pre></td></tr></table></figure>

<p>但是这个方案的缺点是，Mac系统有一个边框，上面有红色关闭按钮、绿色全屏toggle按钮，只不过点击绿色按钮没有反应。</p>
<h5 id="隐藏绿色按钮"><a href="#隐藏绿色按钮" class="headerlink" title="隐藏绿色按钮"></a>隐藏绿色按钮</h5><p>new BrowserWindo参数</p>
<blockquote>
<p>frame</p>
</blockquote>
<p>设置为false可以隐藏标题栏和窗口控制按钮。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">mainWindow = <span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(&#123;</span><br><span class="line">  <span class="attr">width</span>: <span class="number">1024</span>,</span><br><span class="line">  <span class="attr">height</span>: <span class="number">728</span>,</span><br><span class="line">  <span class="attr">resizable</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">fullscreen</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">frame</span>: <span class="literal">false</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="打包和发布"><a href="#打包和发布" class="headerlink" title="打包和发布"></a>打包和发布</h2><p>对我们前端来说，开发其实是相对来说最容易的一步，因为基本上还是在写js&#x2F;nodejs。electron开发，最终是要发布一个安装包给用户，因此关键并且陌生的部分是如何正确的构建和发布。</p>
<p>对于构建，有三种方式可以选择</p>
<ul>
<li>electron-force</li>
<li>electron-builder</li>
<li>electron-package</li>
</ul>
]]></content>
      <tags>
        <tag>electron</tag>
        <tag>react</tag>
        <tag>starter</tag>
      </tags>
  </entry>
  <entry>
    <title>electron 主进程调用渲染进程发送请求</title>
    <url>/hexo-blog/2023/10/13/electron-%E4%B8%BB%E8%BF%9B%E7%A8%8B%E8%B0%83%E7%94%A8%E6%B8%B2%E6%9F%93%E8%BF%9B%E7%A8%8B%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82/</url>
    <content><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><ol>
<li>两个进程的cookie不共享，因此需要在渲染进程发送</li>
<li>主进程通知渲染进程发送，并等待请求响应结果，再做下一步处理。</li>
</ol>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>由于IPC都是EventEmmiter模式的，因此我们需要用Promise包装一下 IPC的通知。 </p>
<h3 id="主进程发送消息给渲染进程"><a href="#主进程发送消息给渲染进程" class="headerlink" title="主进程发送消息给渲染进程"></a>主进程发送消息给渲染进程</h3><p>单向通知，不关心接收方的响应</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 主进程向渲染进程发送消息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> channel 频道</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> msg 消息数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">sendToRenderer</span> = (<span class="params">channel: string, msg: any</span>) =&gt; &#123;</span><br><span class="line"><span class="comment">// 封装webcontent的send方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="主进程发送消息给渲染进程，并等待渲染进程的响应"><a href="#主进程发送消息给渲染进程，并等待渲染进程的响应" class="headerlink" title="主进程发送消息给渲染进程，并等待渲染进程的响应"></a>主进程发送消息给渲染进程，并等待渲染进程的响应</h3><p>双向通信，等待响应数据好继续执行任务</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 主进程向渲染进程发送消息，并等待渲染进程的响应</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> channel 频道</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> msg 消息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> Pomise&lt;any&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">callRenderer</span> = (<span class="params">channel: string, msg: any</span>) =&gt; <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">onData</span> = (<span class="params">e: any, result: any</span>) =&gt; &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(result)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> &#123; sendChannel, dataChannel &#125; = <span class="title function_">getIPCChannels</span>(channel)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听渲染进程的响应</span></span><br><span class="line">    ipcMain.<span class="title function_">once</span>(dataChannel, onData)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> mainWindow = <span class="title class_">BrowserWindow</span>.<span class="title function_">getFocusedWindow</span>()</span><br><span class="line">    <span class="keyword">if</span> (mainWindow &amp;&amp; mainWindow.<span class="property">webContents</span>) &#123;</span><br><span class="line">      <span class="comment">// 发送消息</span></span><br><span class="line">      mainWindow.<span class="property">webContents</span>.<span class="title function_">send</span>(sendChannel, msg)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 取消监听</span></span><br><span class="line">      ipcMain.<span class="title function_">removeListener</span>(dataChannel, onData)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>

<h3 id="渲染进程响应主进程调用"><a href="#渲染进程响应主进程调用" class="headerlink" title="渲染进程响应主进程调用"></a>渲染进程响应主进程调用</h3><p>与 callRenderer 配合使用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 响应Main进程调用并返回数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> channel 频道</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> callback 回调， (data:any) =&gt; Promise&lt;any&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">answerMain</span> = (<span class="params"></span></span><br><span class="line"><span class="params">  channel: string,</span></span><br><span class="line"><span class="params">  callback: (data: any) =&gt; <span class="built_in">Promise</span>&lt;any&gt;</span></span><br><span class="line"><span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; sendChannel, dataChannel &#125; = <span class="title function_">getIPCChannels</span>(channel)</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">listener</span> = <span class="keyword">async</span> (<span class="params">event: any, data: any</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      log.<span class="title function_">info</span>(<span class="string">&#x27;answerMain params:&#x27;</span>, data)</span><br><span class="line">      <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">callback</span>(data)</span><br><span class="line">      log.<span class="title function_">info</span>(<span class="string">&#x27;answerMain data&#x27;</span>, res)</span><br><span class="line">      ipcRenderer.<span class="title function_">send</span>(dataChannel, res)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      log.<span class="title function_">info</span>(<span class="string">&#x27;answerMain error:&#x27;</span>)</span><br><span class="line">      log.<span class="title function_">error</span>(error)</span><br><span class="line">      ipcRenderer.<span class="title function_">send</span>(dataChannel, <span class="literal">null</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ipcRenderer.<span class="title function_">on</span>(sendChannel, listener)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>使用 case： 主进程调用渲染进程发送请求</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">data</span>: any = <span class="keyword">await</span> <span class="title function_">callRenderer</span>(<span class="string">&#x27;api-report&#x27;</span>, deviceInfo)</span><br><span class="line"></span><br><span class="line"><span class="comment">// render</span></span><br><span class="line"><span class="title function_">answerMain</span>(<span class="string">&#x27;api-report&#x27;</span>,  aync () =&gt; &#123;</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">doSomething</span>()</span><br><span class="line">  <span class="keyword">return</span> data</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<p>参考：<a href="https://github.com/sindresorhus/electron-better-ipc">https://github.com/sindresorhus/electron-better-ipc</a></p>
]]></content>
  </entry>
  <entry>
    <title>electron内页面nav卡住</title>
    <url>/hexo-blog/2023/10/13/electron%E5%86%85%E9%A1%B5%E9%9D%A2nav%E5%8D%A1%E4%BD%8F/</url>
    <content><![CDATA[<p>现象：<br>无法使用location的api刷新 or 替换页面url。</p>
<p>原因：<br>第三方页面使用了beforeunload事件，正常浏览器会弹窗用户确认，并阻塞直到用户完成操作。electron内默认没有弹窗，但是正常阻塞了，所以需要额外处理。</p>
<p>参考：<a href="https://github.com/mrdulin/blog/issues/38">https://github.com/mrdulin/blog/issues/38</a></p>
]]></content>
  </entry>
  <entry>
    <title>firfox的textarea设置rows并同时设置overflow：scroll 无效</title>
    <url>/hexo-blog/2023/10/08/firfox%E7%9A%84textarea%E8%AE%BE%E7%BD%AErows%E5%B9%B6%E5%90%8C%E6%97%B6%E8%AE%BE%E7%BD%AEoverflow%EF%BC%9Ascroll-%E6%97%A0%E6%95%88/</url>
    <content><![CDATA[<p>改为div包裹textarea，rows增大，用div来做滚动</p>
]]></content>
  </entry>
  <entry>
    <title>git-status-introduction</title>
    <url>/hexo-blog/2016/08/28/git-status-introduction/</url>
    <content><![CDATA[<h1 id="GIT状态图"><a href="#GIT状态图" class="headerlink" title="GIT状态图"></a>GIT状态图</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>使用git，也有一段时间了，但是对git集中状态没有比较清晰的一个认识，尤其是涉及到代码回滚，直到最近阅读了git的官方文档（文档是个好东西，你值得拥有），画了一张图来帮助自己理顺git的套路。</p>
<span id="more"></span>

<p>一言不合就上图</p>
<img src="/hexo-blog/2016/08/28/git-status-introduction/git.svg" class="" title="git svg">
]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>gitlab-runner-mac-win</title>
    <url>/hexo-blog/2019/06/12/gitlab-runner-mac-win/</url>
    <content><![CDATA[<h1 id="gitlab-配置-mac-x2F-win-系统-runner，win-有问题【解决】"><a href="#gitlab-配置-mac-x2F-win-系统-runner，win-有问题【解决】" class="headerlink" title="gitlab 配置 mac&#x2F;win 系统 runner，win 有问题【解决】"></a>gitlab 配置 mac&#x2F;win 系统 runner，win 有问题【解决】</h1><p>gitlab 的 runner 就是触发 ci&#x2F;cd 之后，执行 gitlab-ci.yml 里的脚本的容器。一般呢，都是 docker。我最近有个 electron 的项目，想做 cicd 的自动打包，需要 mac 和 win 环境，于是先把自己的电脑配置为 runner 跑一次。</p>
<span id="more"></span>

<h2 id="mac"><a href="#mac" class="headerlink" title="mac"></a>mac</h2><h3 id="安装-runner"><a href="#安装-runner" class="headerlink" title="安装 runner"></a>安装 runner</h3><ul>
<li><p>下载</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo curl --output /usr/local/bin/gitlab-runner https://gitlab-runner-downloads.s3.amazonaws.com/latest/binaries/gitlab-runner-darwin-amd64</span><br></pre></td></tr></table></figure>
</li>
<li><p>给权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">chmod</span> +x /usr/local/bin/gitlab-runner</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装和启动 runner 服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">gitlab-runner install</span><br><span class="line">gitlab-runner start</span><br></pre></td></tr></table></figure>
</li>
<li><p>检验安装结果</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gitlab-runner -h</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h3><ul>
<li><p>获取 tocken</p>
<ul>
<li>在项目的 Setting &gt; CI&#x2F;CD 页<ul>
<li>Runners settings &gt; Specific Runners</li>
<li>获取 URL 和 tocken<br><img src="https://note.youdao.com/yws/api/personal/file/WEB8e12e879cab34af525fcf198740e0471?method=download&shareKey=f6e3fd5c4ec3aa196c28d2d0cb2caa0e" alt="image"></li>
</ul>
</li>
</ul>
</li>
<li><p>执行注册命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gitlab-runner register</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  gitlab-runner register</span><br><span class="line">Runtime platform                                    <span class="built_in">arch</span>=amd64 os=darwin pid=68127 revision=ac2a293c version=11.11.2</span><br><span class="line">WARNING: Running <span class="keyword">in</span> user-mode.</span><br><span class="line">WARNING: Use sudo <span class="keyword">for</span> system-mode:</span><br><span class="line">WARNING: $ sudo gitlab-runner...</span><br><span class="line"></span><br><span class="line">Please enter the gitlab-ci coordinator URL (e.g. https://gitlab.com/):</span><br><span class="line"><span class="comment"># 输入获取的URL</span></span><br><span class="line"></span><br><span class="line">Please enter the gitlab-ci token <span class="keyword">for</span> this runner:</span><br><span class="line"><span class="comment"># 输入tocken</span></span><br><span class="line"></span><br><span class="line">Please enter the gitlab-ci description <span class="keyword">for</span> this runner:</span><br><span class="line">[hostname]: my-runner</span><br><span class="line"></span><br><span class="line">Please enter the gitlab-ci tags <span class="keyword">for</span> this runner (comma separated):</span><br><span class="line">mac</span><br><span class="line"></span><br><span class="line">Registering runner... succeeded                     runner=6sbhZbPi</span><br><span class="line"></span><br><span class="line">Registering runner... succeeded                     runner=6sbhZbPi</span><br><span class="line"></span><br><span class="line">Please enter the executor: docker, parallels, shell, docker-ssh+machine, kubernetes, docker-ssh, ssh, virtualbox, docker+machine:</span><br><span class="line">shell</span><br><span class="line"></span><br><span class="line">Runner registered successfully. Feel free to start it, but <span class="keyword">if</span> it<span class="string">&#x27;s running already the config should be automatically reloaded!</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>进入项目的 Setting &gt; CI&#x2F;CD 页查看新注册的 runner</p>
<ul>
<li>Runners settings &gt; Specific Runners</li>
</ul>
</li>
</ul>
<h3 id="使用这个-runner"><a href="#使用这个-runner" class="headerlink" title="使用这个 runner"></a>使用这个 runner</h3><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="https://docs.gitlab.com/runner/install/osx.html">https://docs.gitlab.com/runner/install/osx.html</a></li>
<li><a href="https://docs.gitlab.com/runner/register/index.html">https://docs.gitlab.com/runner/register/index.html</a></li>
<li><a href="https://qii404.me/2018/06/21/gitlab-runner.html">https://qii404.me/2018/06/21/gitlab-runner.html</a></li>
</ul>
<h2 id="win"><a href="#win" class="headerlink" title="win"></a>win</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul>
<li>创建一个文件夹，eg: C:\GitLab-Runner</li>
<li>下载二进制安装包（x86&#x2F;amd64），（我用的 x86）放到我们创建的文件夹里，重命名二进制包为 gitlab-runner.exe</li>
</ul>
<h3 id="注册-runner"><a href="#注册-runner" class="headerlink" title="注册 runner"></a>注册 runner</h3><ul>
<li><p>开一个 powershell 右键以管理员运行</p>
</li>
<li><p>进入刚刚创建的文件夹路径</p>
</li>
<li><p>执行注册命令,</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.\gitlab-runner.exe register</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>跟 mac 下的 runner 注册流程一致，输入 gitlab 项目里的网址 URL 和 tocken，选择 executor 为 shell，tag 为 windows</p>
</li>
</ul>
<h3 id="安装-runner-服务并启动"><a href="#安装-runner-服务并启动" class="headerlink" title="安装 runner 服务并启动"></a>安装 runner 服务并启动</h3><ul>
<li><p>执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.\gitlab-runner.exe install</span><br><span class="line">.\gitlab-runner.exe start</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="参考-1"><a href="#参考-1" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="https://docs.gitlab.com/runner/install/windows.html">https://docs.gitlab.com/runner/install/windows.html</a></li>
<li><a href="https://my.oschina.net/u/3756690/blog/1839652">https://my.oschina.net/u/3756690/blog/1839652</a></li>
<li>中文乱码，<a href="https://scfido.github.io/2018/07/11/GitLab-CI%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.html">https://scfido.github.io/2018/07/11/GitLab-CI%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.html</a></li>
<li><a href="https://www.cnblogs.com/newP/p/5735366.html#_Toc458009356">https://www.cnblogs.com/newP/p/5735366.html#_Toc458009356</a></li>
</ul>
<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><h4 id="gitlab-报错乱码"><a href="#gitlab-报错乱码" class="headerlink" title="gitlab 报错乱码"></a>gitlab 报错乱码</h4><p>参考中文乱码的解决方案，无效；另一个方案为改系统语言为英文，重启依旧有乱码。</p>
<h4 id="gitlab-执行-git-报错乱码"><a href="#gitlab-执行-git-报错乱码" class="headerlink" title="gitlab 执行 git 报错乱码"></a>gitlab 执行 git 报错乱码</h4><p>执行 shell 为 powershell，报错信息看起来 git’clone 没有成功；但是环境变量已经配置好了。重启电脑之后好了。</p>
<h3 id="DEBUG-PROD-x3D-true-yarn-package-报错"><a href="#DEBUG-PROD-x3D-true-yarn-package-报错" class="headerlink" title="DEBUG_PROD&#x3D;true yarn package 报错"></a>DEBUG_PROD&#x3D;true yarn package 报错</h3><p><img src="https://note.youdao.com/yws/api/personal/file/WEBd64bf2d2205c2cc6921f9146b86e3c1e?method=download&shareKey=3c5e8a856839fc8b03a359875be9bf67" alt="image"></p>
<p>原因为，在 windows 中的执行环境为 powershell，设置 node 临时环境变量的语法跟 linux 系统不一样。</p>
<p>改为</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$env</span>:DEBUG_PROD=<span class="literal">true</span>; yarn package</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>mac</tag>
        <tag>windows</tag>
        <tag>gitlab</tag>
        <tag>runner</tag>
        <tag>ci/cd</tag>
      </tags>
  </entry>
  <entry>
    <title>gitlabci在docker中执行yarn install 报错</title>
    <url>/hexo-blog/2023/10/08/gitlabci%E5%9C%A8docker%E4%B8%AD%E6%89%A7%E8%A1%8Cyarn-install-%E6%8A%A5%E9%94%99/</url>
    <content><![CDATA[<p>报错信息：<br><code>chromedriver installation failed error with http(s) request: error: read econnreset</code><br>有可能是wall的问题。试试替换yarn镜像源</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn config set registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<p>再试一次 ok了。<br>但是第二次之后就不行了。<br>怀疑是这个包有问题。于是删掉了这个包试一下。<br><a href="https://github.com/yoowinsu/blog/issues/64">https://github.com/yoowinsu/blog/issues/64</a></p>
]]></content>
  </entry>
  <entry>
    <title>hexo-blog</title>
    <url>/hexo-blog/2018/11/05/hexo-blog/</url>
    <content><![CDATA[<h1 id="hexo-blog-日志"><a href="#hexo-blog-日志" class="headerlink" title="hexo-blog 日志"></a>hexo-blog 日志</h1><h4 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h4><p>原本旧的 blog 是 16 年开始学习前端的时候搭建的，纯 html，css，js 写的静态页面，当时这样选择是想多给自己一些手写基础代码的机会来逐渐熟悉前端基础。时过进迁，目前写 blog 的需求已经回归到写作本身了，这样旧的 blog 页带来的写作成本，导致我经常性在印象笔记、有道云笔记甚至本地 markdown 编辑器来码字，并且积攒在本地，难以及时更新到 git。综上所述，旧的 blog 不再适合当前的场景，因此决定迁移为 hexo 方式。</p>
<span id="more"></span>

<h4 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h4><p>这部分，没什么难的，hexo 官方文档非常简单明了，清晰易懂。</p>
<ul>
<li>配置文章的静态资源路径为独立的，在主题设置中设置好<br><code>post_asset_folder: true</code></li>
</ul>
<h4 id="next-主题"><a href="#next-主题" class="headerlink" title="next 主题"></a>next 主题</h4><p>这个也是按照 next 官方文档一套走起，可以根据自己的需求，对主题定制。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>

<h4 id="增加-about，tags-路由，"><a href="#增加-about，tags-路由，" class="headerlink" title="增加 about，tags 路由，"></a>增加 about，tags 路由，</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page <span class="string">&quot;about&quot;</span></span><br><span class="line"></span><br><span class="line">hexo new page <span class="string">&quot;tags</span></span><br></pre></td></tr></table></figure>

<h4 id="readMore"><a href="#readMore" class="headerlink" title="readMore"></a>readMore</h4><p>在文章中想要截断的位置手动增加</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;!-- more --&gt;</span><br></pre></td></tr></table></figure>

<h4 id="css-js-404"><a href="#css-js-404" class="headerlink" title="css js 404"></a>css js 404</h4><p><a href="https://github.com/iissnan/hexo-theme-next/issues/1214">issue</a></p>
<h4 id="添加-themes-到-git-保存"><a href="#添加-themes-到-git-保存" class="headerlink" title="添加 themes 到 git 保存"></a>添加 themes 到 git 保存</h4><ul>
<li>删除 <code>themes/next/.git</code></li>
<li><code>git rm --cached ./themes/next</code></li>
<li><code>git add .</code></li>
<li>提交到 git</li>
</ul>
<p>如果你需要<a href="https://stackoverflow.com/questions/13698978/git-undoing-git-rm/13699072">undo git rm</a></p>
<h4 id="旧的已有-blog-页面迁移"><a href="#旧的已有-blog-页面迁移" class="headerlink" title="旧的已有 blog 页面迁移"></a>旧的已有 blog 页面迁移</h4><h5 id="canvas-pie"><a href="#canvas-pie" class="headerlink" title="canvas pie"></a>canvas pie</h5><p>涉及如何加载script，我设置了<code>post_asset_folder: true</code>，因此会在posts文件夹下，新建post同名文件夹canvas-pie，并将pie.js放在这里，在post canvas-pie.md中</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;pie.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>可以加载js，但是引发了另一个问题，<code>/posts/canvas-pie/pie.js</code>也被识别为一篇文章，乱码展示在首页，如何解决这个问题呢？<br>配置_config.yml</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">skip_render:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;**/*.js&quot;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;*/*.js&quot;</span></span><br></pre></td></tr></table></figure>

<p>然后 hexo clean， hexo server 重新启动</p>
<h4 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h4><ul>
<li>issue 的文字迁移</li>
<li>本地 markdown 迁移</li>
<li>其他云存储的笔记迁移</li>
</ul>
]]></content>
      <tags>
        <tag>hexo</tag>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>learn-css-grid-in-5-minutes-translation</title>
    <url>/hexo-blog/2017/11/30/learn-css-grid-in-5-minutes-translation/</url>
    <content><![CDATA[<h1 id="【译】5分钟入门CSS-Grid网格布局"><a href="#【译】5分钟入门CSS-Grid网格布局" class="headerlink" title="【译】5分钟入门CSS Grid网格布局"></a>【译】5分钟入门CSS Grid网格布局</h1><blockquote>
<p><a href="https://medium.freecodecamp.org/learn-css-grid-in-5-minutes-f582e87b1228">原文地址</a></p>
</blockquote>
<p>简短介绍一下web布局的未来</p>
<img src="/hexo-blog/2017/11/30/learn-css-grid-in-5-minutes-translation/1_Oc88rInEcNuY-xCN3e1iPQ.png" class="">

<span id="more"></span>

<p>网格布局是网站设计的核心，而CSS Grid网格布局模式是实现网格布局最简单而有效的方式。</p>
<p>今年主流浏览器(Safari, Chrome, Firefox)已经支持原生CSS Grid网格布局，所以我坚信不久的将来，所有前端开发者都不得不去学习这个技术。</p>
<p>本文我将快速的讲一下最基本的CSS Grid的知识，超出基础知识之外的都不在本文的范围内。</p>
<blockquote>
<p>我正在开发一门深入学习CSS Grid的免费课程，预计12月份发布。你可以看一下<a href="https://scrimba.com/c/c2gd3T2">这门课的预览</a></p>
</blockquote>
<img src="/hexo-blog/2017/11/30/learn-css-grid-in-5-minutes-translation/1_UOpwxw1tMK30dOG1jn6IRg.png" class="">

<p>对了，如果你想早点儿参加这门课程，可以在<a href="http://eepurl.com/c_R31n">这里留下你的email</a></p>
<p>正文开始！</p>
<h2 id="你的第一个网格布局"><a href="#你的第一个网格布局" class="headerlink" title="你的第一个网格布局"></a>你的第一个网格布局</h2><p>CSS Grid网格布局的两个核心是<code>网格容器</code>(父级）和<code>网格项目</code>(子级），网格容器是实际上的网格，网格项目是网格中的内容。</p>
<p>下面是包含6个网格项目的网格容器的html代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>把容器<code>div</code>转化为网格，只需要设置display属性为<code>grid</code>:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>好，但是看起来没什么特别，因为我们还没有设置我们想要网格展现的样子，它目前就只是6个div罗列在一起。</p>
<img src="/hexo-blog/2017/11/30/learn-css-grid-in-5-minutes-translation/1_vTY7C5FMIp8OLkjrgp-vBg.png" class="">

<p style='text-align: center;color:gray;'>我加了一点css样式，但是跟grid没什么关系</p>


<h2 id="行跟列"><a href="#行跟列" class="headerlink" title="行跟列"></a>行跟列</h2><p>要生成二维网格布局，我们需要定义行跟列。我们来写一个2行3列的布局，将使用<code>grid-template-row</code>和<code>grid-template-column</code>两个属性来实现。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    <span class="attribute">grid-template-columns</span>: <span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">grid-template-rows</span>: <span class="number">50px</span> <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>我们给<code>grid-template-column</code>属性设置了三个值实现三列；给<code>grid-template-row</code>属性设置了两个值实现两行。</p>
<p>这两个属性的值决定了我们的列宽（100px）和行高（50px），下面是效果：</p>


<p>我们看下面的例子，来检查一下你是否真的正确理解了，这两个属性值和网格布局样式之间的关系：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    <span class="attribute">grid-template-columns</span>: <span class="number">200px</span> <span class="number">50px</span> <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">grid-template-rows</span>: <span class="number">100px</span> <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>试着理解代码和布局样式之间的联系，想一下这段代码会实现什么样的布局。这是这段代码表现出来的样子：</p>
<img src="/hexo-blog/2017/11/30/learn-css-grid-in-5-minutes-translation/1_fJNIdDiScjhI9CZjdxv3Eg.png" class="">

<h2 id="定位项目"><a href="#定位项目" class="headerlink" title="定位项目"></a>定位项目</h2><p>我们接下来要学习的是，如何在网格中定位网格项目（item），这才是使得网格布局变得非常简单的‘黑科技’。</p>
<p>让我们用上文学习的代码构造一个3x3的网格：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    <span class="attribute">grid-template-columns</span>: <span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">grid-template-rows</span>: <span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这段代码实现的布局表现如下：</p>
<img src="/hexo-blog/2017/11/30/learn-css-grid-in-5-minutes-translation/1_WxIT0z8OH7-rkoFMg5fwRw.png" class="">

<blockquote>
<p>注意到，我们在页面上只能看到一个3x2的网格，然而我们设置的是3x3的网格。这是因为我们只有6个项目来填充网格，如果我们有9个项目，那么最后一行也会被填满了。</p>
</blockquote>
<p>想要定位和调整项目，我们需要将这个项目标定出来并设置<code>grid-column</code>和<code>grid-row</code>属性：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item1</span> &#123;</span><br><span class="line">    <span class="attribute">grid-column-start</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">grid-column-end</span>: <span class="number">4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这段代码的意思是，我们想让item1从列线1开始，延伸到列线4。换句话说，就是铺满一行，下面是代码运行的效果：</p>
<img src="/hexo-blog/2017/11/30/learn-css-grid-in-5-minutes-translation/1_he7CoAzdQB3sei_WpHOtNg.png" class="">

<p>为什么我们只设置了3列却有4条列线呢？看下图中的黑色的线，就是列线。</p>
<img src="/hexo-blog/2017/11/30/learn-css-grid-in-5-minutes-translation/1_l-adYpQCGve7W6DWY949pw.png" class="">

<p>注意到我们现在占用了网格的所有行啦，当我们让第一个项目占据整个第一行的时候，它就把其他的项目挤到下边去了。</p>
<p>最后，上面那段代码可以简写为：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item1</span> &#123;</span><br><span class="line">    <span class="attribute">grid-column</span>: <span class="number">1</span> / <span class="number">4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>为了确保你真的理解了这个概念，我们稍微重新排列一下项目。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item1</span> &#123;</span><br><span class="line">    <span class="attribute">grid-column-start</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">grid-column-end</span>: <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item3</span> &#123;</span><br><span class="line">    <span class="attribute">grid-row-start</span>: <span class="number">2</span>;</span><br><span class="line">    <span class="attribute">grid-row-end</span>: <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item4</span> &#123;</span><br><span class="line">    <span class="attribute">grid-column-start</span>: <span class="number">2</span>;</span><br><span class="line">    <span class="attribute">grid-column-end</span>: <span class="number">4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>下图是上面这段代码执行的效果。快动脑筋努力思考下它为什么实现成这样，一点也不难啦。</p>
<img src="/hexo-blog/2017/11/30/learn-css-grid-in-5-minutes-translation/1_QDSybpxjXSat6UtoHgUapQ.png" class="">

<p>就酱！</p>
<p>我们没讲的概念还有很多啦，如果你想进一步学习的话，在<a href="http://eepurl.com/c_R31n">这里</a>留下你的email，我在<a href="http://scrimba.com/">Scrimba</a>发布免费的CSS Grid课程的时候会通知你。</p>
<p>有任何问题请评论，我会尽可能回答 ：）</p>
]]></content>
      <tags>
        <tag>css</tag>
        <tag>grid</tag>
      </tags>
  </entry>
  <entry>
    <title>learn-typescript-1</title>
    <url>/hexo-blog/2019/04/30/learn-typescript-1/</url>
    <content><![CDATA[<h1 id="typescript-学习笔记一：-类型"><a href="#typescript-学习笔记一：-类型" class="headerlink" title="typescript 学习笔记一： 类型"></a>typescript 学习笔记一： 类型</h1><p>最近我新开了一个electron项目，考虑到可能会持续迭代，以及客户端线上bugfix是没有前端页面方便的，因此需要这个项目尽可能的是一个稳定可靠的项目，最终我决定采用typescript来约束开发者，短期会增加一些学习成本，长期来看维护成本是有所减少的。那么就从头学习一下typescript吧。</p>
<p>学习资源：</p>
<ul>
<li><a href="https://ts.xcatliu.com/introduction/what-is-typescript.html">typescript 入门教程</a></li>
<li><a href="https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/tsconfig.json.html">typescript handbook（config部分）</a></li>
</ul>
<span id="more"></span>

<h2 id="简单开始"><a href="#简单开始" class="headerlink" title="简单开始"></a>简单开始</h2><p>全局安装ts，这个部分可以参考官方文档，typescript的文件后缀是 .ts, 相应的react的jsx文件的扩展名为 .tsx。 ts文件是需要编译成js 文件才能执行的，编译指令就是 tsc ，这个命令在你全局安装typescript的时候就安装好了。</p>
<h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><p>执行命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tsc hello.ts</span><br></pre></td></tr></table></figure>

<p>会生成js文件，ts在编译的时候就会进行检查，如果有错误，是不会编译成功的。</p>
<p>默认如果编译报错，仍旧会生成js文件，想要终止js生成，可以在<code>tsconfig.json</code>中配置 <code>noEmitOnError</code>。<code>tsconfig.json</code>就是ts的配置文件。</p>
<h2 id="类型注解"><a href="#类型注解" class="headerlink" title="类型注解"></a>类型注解</h2><h3 id="原始数据类型"><a href="#原始数据类型" class="headerlink" title="原始数据类型"></a>原始数据类型</h3><p>可以使用这些类型来定义变量的类型，这就是类型注解，表明的意义是，这个变量我期望是一个什么类型的，ts你帮我检查。</p>
<ul>
<li>boolean</li>
<li>number</li>
<li>string</li>
<li>undefined</li>
<li>void</li>
</ul>
<p>例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">name</span>: string = <span class="string">&#x27;Tom&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">age</span>: number = <span class="number">11</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">isMan</span>: boolean = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">money</span>: <span class="literal">undefined</span> = <span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">girlfriend</span>: <span class="literal">null</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ouputName</span>(<span class="params"></span>): <span class="keyword">void</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;name:&#x27;</span>, name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们可以获取到的信息是：Tom是一个11岁的男生，没有钱也没有女朋友，执行outputName函数的时候没有返回。</p>
<p>需要特别注意的是 undefined 和 null 类型是说有类型的子类型，也就是说</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">u</span>: <span class="literal">undefined</span> = <span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">n</span>: <span class="literal">null</span> = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">name</span>: string = <span class="literal">undefined</span>;</span><br><span class="line"><span class="comment">// or</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">name</span>: string = <span class="literal">null</span>;</span><br><span class="line"><span class="comment">// or</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">name</span>: string = u;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">name</span>: string = n;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这样写是不会出问题的，但是如果把 void类型的变量赋值给name就会出问题。</p>
<h3 id="任意类型-Any"><a href="#任意类型-Any" class="headerlink" title="任意类型 Any"></a>任意类型 Any</h3><p>Any类型允许通过赋值改变类型，它既可以注解 <strong>属性</strong> 也可以注解 <strong>方法</strong>。<strong>声明一个变量为任意值之后，对它的任何操作，返回的内容的类型都是任意值。</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">anything</span>:any = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">anything = <span class="string">&#x27;Name&#x27;</span>;</span><br><span class="line">anything.<span class="title function_">setName</span>(<span class="string">&#x27;Bob&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>两种方式定义。</p>
<ul>
<li><code>let list: number[] = [1,2,4]</code></li>
<li>第二种方式是使用数组泛型 Array&lt;元素类型&gt;， <code>let list:Array&lt;number&gt; = [1,2,4]</code></li>
</ul>
<h3 id="类型推论"><a href="#类型推论" class="headerlink" title="类型推论"></a>类型推论</h3><p>如果没有明确的指定类型，那么 TypeScript 会依照类型推论（Type Inference）的规则推断出一个类型。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// num 被推断为number</span></span><br><span class="line">num = <span class="string">&#x27;str&#x27;</span></span><br><span class="line"><span class="comment">// 报错</span></span><br></pre></td></tr></table></figure>

<p>如果定义的时候没有赋值，不管之后有没有赋值，都会被推断成 any 类型而完全不被类型检查。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> anything;</span><br><span class="line"><span class="comment">// 被推断为any 类型</span></span><br><span class="line">anything = <span class="string">&#x27;name&#x27;</span>;</span><br><span class="line">anything = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// 没有问题</span></span><br></pre></td></tr></table></figure>

<h3 id="多个类型怎么办？联合类型"><a href="#多个类型怎么办？联合类型" class="headerlink" title="多个类型怎么办？联合类型"></a>多个类型怎么办？联合类型</h3><p>如果我有一个值 他就是可能又多种类型的值，那么我可以采用 <strong>联合类型</strong> ,就是同时注解多个类型，使用 <code>|</code> 分隔。<br>需注意的一点：当 TypeScript 不确定一个联合类型的变量到底是哪个类型的时候， <strong>只能访问此联合类型的所有类型里共有的属性或方法</strong>。 如果TS腿断出来了类型，那么就不会编译报错。</p>
<h3 id="元组Tuple"><a href="#元组Tuple" class="headerlink" title="元组Tuple"></a>元组Tuple</h3><p>如果数据的元素的类型不同，并已知元素数量，可以使用元组定义。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">tmp</span>: [string, number] = [<span class="string">&#x27;name&#x27;</span>, <span class="number">12</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果访问越界元素，也就是没有定义类型的元素，那么按照联合类型推断</span></span><br><span class="line">tmp[<span class="number">2</span>] = <span class="string">&#x27;Jack&#x27;</span></span><br><span class="line"><span class="comment">// ok 联合类型(string|number)</span></span><br><span class="line">tmp[<span class="number">3</span>] = <span class="literal">true</span></span><br><span class="line"><span class="comment">// wrong, boolean 不是联合类型(string|number)之一。</span></span><br></pre></td></tr></table></figure>

<h3 id="object"><a href="#object" class="headerlink" title="object"></a>object</h3><p>除number string boolean sumblo null undefined 之外的非原始类型。</p>
<h3 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h3><p>类似强制类型转换，但是不进行检查。语法两种：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">some</span>: <span class="built_in">any</span> = <span class="string">&#x27;str&#x27;</span></span><br><span class="line"><span class="comment">// 1 &lt;&gt;</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">len</span>: <span class="built_in">number</span> = (&lt;<span class="built_in">string</span>&gt;some).<span class="property">length</span></span><br><span class="line"><span class="comment">// 2 as</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">len2</span>: <span class="built_in">number</span>= (some <span class="keyword">as</span> <span class="built_in">string</span>).<span class="property">length</span></span><br></pre></td></tr></table></figure>

<p>这个特性适合的一个场景就是，在ts中，如果给window设置一个全局变量</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">a</span> = <span class="string">&#x27;a&#x27;</span> <span class="comment">// ts报错：Window 类型上不存在a属性</span></span><br></pre></td></tr></table></figure>

<p>那么如何绕过这个呢，就可以使用类型断言，把window的类型强制转换为 any</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(&lt;any&gt;<span class="variable language_">window</span>).<span class="property">a</span> = <span class="string">&#x27;a&#x27;</span></span><br><span class="line"><span class="comment">// or</span></span><br><span class="line">(<span class="variable language_">window</span> <span class="keyword">as</span> any).<span class="property">a</span> = <span class="string">&#x27;a&#x27;</span></span><br></pre></td></tr></table></figure>

<p>或者通过any类型绕过</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">winAny</span>:any = <span class="variable language_">window</span></span><br><span class="line">winAny.<span class="property">a</span> = <span class="string">&#x27;a&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote>
<p><a href="http://www.ayqy.net/blog/%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B_typescript%E7%AC%94%E8%AE%B02/">http://www.ayqy.net/blog/%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B_typescript%E7%AC%94%E8%AE%B02/</a><br><a href="https://www.tslang.cn/docs/handbook/basic-types.html">https://www.tslang.cn/docs/handbook/basic-types.html</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>typescript</tag>
        <tag>类型注解</tag>
        <tag>type</tag>
      </tags>
  </entry>
  <entry>
    <title>learn-typescript-2</title>
    <url>/hexo-blog/2019/05/06/learn-typescript-2/</url>
    <content><![CDATA[<h1 id="typescript-学习笔记二：-接口"><a href="#typescript-学习笔记二：-接口" class="headerlink" title="typescript 学习笔记二： 接口"></a>typescript 学习笔记二： 接口</h1><p>接口用来定义复杂的类型（比如对象，函数），描述复杂类型应该是一个什么样子的“鸭子”。可以简单理解为期望获得一个具有什么样类型的对象（当然不止对象类型）。</p>
<span id="more"></span>

<h2 id="对象类型接口"><a href="#对象类型接口" class="headerlink" title="对象类型接口"></a>对象类型接口</h2><p>有一个对象可能长这样,统计了一个学生的信息，其中名字和年龄是一定会有的，身高可能没有数据，并且姓名数据不可以修改，是只读的。可能还有其他未知的数据。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Bob&#x27;</span></span><br><span class="line">  <span class="attr">age</span>: <span class="number">12</span>,</span><br><span class="line">  <span class="attr">height</span>: <span class="number">150</span>,</span><br><span class="line">  <span class="attr">ffja8efhwfbfkwnsalkdfjpiw</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>那么我如何来描述这样的要求呢？</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">interface <span class="title class_">StudentInfo</span> &#123;</span><br><span class="line">  readonly <span class="attr">name</span>: string;</span><br><span class="line">  <span class="attr">age</span>: number;</span><br><span class="line">  height?: number;</span><br><span class="line">  [<span class="attr">propName</span>: string]: any;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>readonly</code>表示<strong>只读</strong>，<code>?</code>表示<strong>可选属性</strong>, 其他未知的属性，使用<strong>索引签名</strong>来约束，<code>[propName: string]: any;</code> 值不确定就写成any，确定就写成某一基础类型比如 <code>boolean</code>.</p>
<h2 id="函数类型接口"><a href="#函数类型接口" class="headerlink" title="函数类型接口"></a>函数类型接口</h2><p>用<strong>调用签名</strong>来描述，描述函数的<strong>参数列表</strong>和<strong>返回值类型</strong>, 是的不需要关注函数名字。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">interface <span class="title class_">SearchFunc</span> &#123;</span><br><span class="line">  (<span class="attr">source</span>: string, <span class="attr">subString</span>: string): boolean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="可索引类型接口"><a href="#可索引类型接口" class="headerlink" title="可索引类型接口"></a>可索引类型接口</h2><p>索引签名： 描述对象索引（属性名）的类型，和相应索引返回值（属性值）的类型。<br>什么意思呢，我们一般给对象定义类型接口的时候，是指定了索引具体是’name’还是’age’。如果我们不确定索引可能是什么的时候，有需要这样去描述一个对象&#x2F;数组，它是可以索引的，所以可以是string或者number。</p>
<p>比如在没有枚举的情况下，通常会使用对象来实现一个key是字符，值为数字的字典。我们可以这样描述：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">interface <span class="title class_">NumberDictionary</span> &#123;</span><br><span class="line">  [<span class="attr">index</span>: string]: number</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>也可以描述数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">interface <span class="title class_">NumberArray</span> &#123;</span><br><span class="line">  [<span class="attr">index</span>: number]: number</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>TypeScript支持两种索引签名：字符串和数字.<br>需要注意的是，当使用 number来索引时，JavaScript会将它转换成string然后再去索引对象。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">a[<span class="number">0</span>] === a[<span class="string">&#x27;0&#x27;</span>] <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>因此,在ts中，需要保证使用数字索引的返回值必须是字符串索引返回值类型的子类型。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 父类型</span></span><br><span class="line">interface <span class="title class_">Dog</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类型</span></span><br><span class="line">interface <span class="title class_">Puppy</span> <span class="keyword">extends</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">  <span class="attr">sound</span>: string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确</span></span><br><span class="line">interface <span class="title class_">Animals</span> &#123;</span><br><span class="line">  [<span class="attr">index</span>: number]: <span class="title class_">Puppy</span>;</span><br><span class="line">  [<span class="attr">index</span>: string]: <span class="title class_">Dog</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误，数字索引类型Dog不能赋值给字符串索引类型Puppy</span></span><br><span class="line">interface <span class="title class_">ErrorAnimals</span> &#123;</span><br><span class="line">  [<span class="attr">index</span>: number]: <span class="title class_">Dog</span>;</span><br><span class="line">  [<span class="attr">index</span>: string]: <span class="title class_">Puppy</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="类类型"><a href="#类类型" class="headerlink" title="类类型"></a>类类型</h2><p>类似于面向对象语言的接口的作用，描述一个类公共的部分应该符合什么结构。比如你可以描述类拥有什么属性，需要实现什么样的方法。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">interface <span class="title class_">Dog</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: string;</span><br><span class="line">  <span class="comment">// 描述bark方法</span></span><br><span class="line">  <span class="title function_">bark</span>(<span class="attr">sound</span>: string);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Puppy</span> implements <span class="title class_">Dog</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Puppy&#x27;</span></span><br><span class="line">  <span class="comment">// 实现bark方法</span></span><br><span class="line">  <span class="title function_">bark</span>(<span class="params">sound</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(sound)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="继承接口"><a href="#继承接口" class="headerlink" title="继承接口"></a>继承接口</h2><p>从一个接口复制成员到另一个接口。可以继承多个接口。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 父类型</span></span><br><span class="line">interface <span class="title class_">Dog</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类型</span></span><br><span class="line">interface <span class="title class_">Puppy</span> <span class="keyword">extends</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">  <span class="attr">sound</span>: string</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="混合类型"><a href="#混合类型" class="headerlink" title="混合类型"></a>混合类型</h2><p>函数也是对象，那接口可以同时作为对象和函数使用。</p>
<h2 id="接口继承类"><a href="#接口继承类" class="headerlink" title="接口继承类"></a>接口继承类</h2><p>todo</p>
]]></content>
      <tags>
        <tag>typescript</tag>
        <tag>接口</tag>
        <tag>interfaces</tag>
      </tags>
  </entry>
  <entry>
    <title>learn-typescript-3</title>
    <url>/hexo-blog/2019/06/12/learn-typescript-3/</url>
    <content><![CDATA[<h2 id="泛型是什么"><a href="#泛型是什么" class="headerlink" title="泛型是什么"></a>泛型是什么</h2><h3 id="泛型解决什么问题"><a href="#泛型解决什么问题" class="headerlink" title="泛型解决什么问题"></a>泛型解决什么问题</h3><p>在ts中我们需要声明类型，之后在使用这个变量的时候要求一直是这个类型，如果我们不确定类型的时候，我们可以使用any，但是any并不能保证之后使用该变量的时候它依旧是同一个类型。这类适用于多种类型的声明的需求就是泛型要解决的。泛型使用一个变量来存储声明的类型，之后也都使用该变量指代的类型。</p>
<h3 id="类型变量"><a href="#类型变量" class="headerlink" title="类型变量"></a>类型变量</h3><p>类型变量有点像正则的\1, 捕获变量，代表上一个捕获的结果。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> identity&lt;T&gt;(<span class="attr">arg</span>: T): T &#123;</span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>T就是一个类型变量，当我们给他一个具体的类型之后，T都代表该类型</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> output = identity&lt;string&gt;(<span class="string">&quot;myString&quot;</span>);  <span class="comment">// type of output will be &#x27;string&#x27;</span></span><br></pre></td></tr></table></figure>

<p>这里 T 为类型 string，或者利用<strong>类型推论</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> output = <span class="title function_">identity</span>(<span class="string">&quot;myString&quot;</span>);  <span class="comment">// type of output will be &#x27;string&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="使用数组类型变量"><a href="#使用数组类型变量" class="headerlink" title="使用数组类型变量"></a>使用数组类型变量</h3><p>假设我们知道 参数的类型是数组，但是数组的元素是什么都可以。在不声明是数组的情况下，直接使用length属性是会报错的。<br>所以我们必须声明是数组，但是我们不知道元是什么，这里就可以用类型变量来代替。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">function</span> loggingIdentity&lt;T&gt;(<span class="attr">arg</span>: T[]): T[] &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arg.<span class="property">length</span>);  <span class="comment">// Array has a .length, so no more error</span></span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> loggingIdentity&lt;T&gt;(<span class="attr">arg</span>: <span class="title class_">Array</span>&lt;T&gt;): <span class="title class_">Array</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arg.<span class="property">length</span>);  <span class="comment">// Array has a .length, so no more error</span></span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="泛型函数-amp-泛型接口"><a href="#泛型函数-amp-泛型接口" class="headerlink" title="泛型函数 &amp; 泛型接口"></a>泛型函数 &amp; 泛型接口</h3>]]></content>
      <tags>
        <tag>typescript</tag>
        <tag>泛型</tag>
        <tag>generics</tag>
      </tags>
  </entry>
  <entry>
    <title>macos svn报错</title>
    <url>/hexo-blog/2023/10/07/macos-svn%E6%8A%A5%E9%94%99/</url>
    <content><![CDATA[<p>报错</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xcrun: error: invalid active developer path (/Library/Developer/CommandLineTools), missing xcrun at: /Library/Developer/CommandLineTools/usr/bin/xcrun</span><br></pre></td></tr></table></figure>
<p>解决办法：安装xcode</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xcode-select --install</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>macos安装软件提示已经损坏</title>
    <url>/hexo-blog/2023/10/07/macos%E5%AE%89%E8%A3%85%E8%BD%AF%E4%BB%B6%E6%8F%90%E7%A4%BA%E5%B7%B2%E7%BB%8F%E6%8D%9F%E5%9D%8F/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo spctl --master-disable</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>moov前置加速视频首次可见</title>
    <url>/hexo-blog/2023/10/25/moov%E5%89%8D%E7%BD%AE%E5%8A%A0%E9%80%9F%E8%A7%86%E9%A2%91%E9%A6%96%E6%AC%A1%E5%8F%AF%E8%A7%81/</url>
    <content><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>抓到video标签的url在network中请求多次，不同range。<br>先了解一下下mp4的结构，这里使用meidaParser打开mp4文件<br><img src="https://github.com/Topppy/hexo-blog/assets/9689442/62c756f3-f0cc-4c75-8faa-31100bbe6e67" alt="image"></p>
<p>可以看到是嵌套的类似文件目录的格式，但是呢是有先后顺序的。<br>如果把整个mp4看做一本书的话，其中Moov 类似于整本书的目录，mdat就是占这本书99%以上的书的具体内容，也就是视频的具体内容。</p>
<p>如果moov排在mdat后面的话，浏览器第一次请求的时候，发现诶，我没有拿到书本的目录，没法播放视频，就会直接从视频最后的moov部分，等拿到moov之后，再重新播放视频。</p>
<p>所以，moov前置就会避免多余的请求次数，浏览器一开始就能拿到视频目录moov，就能立刻开始知道怎么播放了。</p>
]]></content>
  </entry>
  <entry>
    <title>react-hooks-came-out</title>
    <url>/hexo-blog/2019/02/13/react-hooks-came-out/</url>
    <content><![CDATA[<h1 id="React-Hooks-终于进稳定版本了！"><a href="#React-Hooks-终于进稳定版本了！" class="headerlink" title="React Hooks 终于进稳定版本了！"></a>React Hooks 终于进稳定版本了！</h1><p>React 终于在16.8版本加入了期待已久的hooks特性。</p>
<h2 id="什么是Hooks？"><a href="#什么是Hooks？" class="headerlink" title="什么是Hooks？"></a>什么是Hooks？</h2><p>Hooks的功能就是复用逻辑，甚至复用包括state的逻辑。</p>
<p>以往我们如果有跟state有关的逻辑，只能写在class组件中，纠缠在各个生命周期里，并且无法复用，样版代码很多。</p>
<p>有了hooks，你不在需要这样做了，你可以直接在fuction组件里复用写好的跟state相关的逻辑，代码量大大减少。每一次这个组件function被执行的时候，hooks都会被执行，这大概是它最像“钩子”的点吧。</p>
<span id="more"></span>

<h3 id="你需要立刻学会并使用hooks吗？"><a href="#你需要立刻学会并使用hooks吗？" class="headerlink" title="你需要立刻学会并使用hooks吗？"></a>你需要立刻学会并使用hooks吗？</h3><p>不需要。class组件不会被废弃，这个新特性对你的已有的业务代码毫无影响。也不需要使用hooks来重写你的旧代码。</p>
<h3 id="使用hooks需要什么条件？"><a href="#使用hooks需要什么条件？" class="headerlink" title="使用hooks需要什么条件？"></a>使用hooks需要什么条件？</h3><p>react和react-dom 的版本要在16.8.0以上。</p>
<h3 id="如何规范hooks代码？"><a href="#如何规范hooks代码？" class="headerlink" title="如何规范hooks代码？"></a>如何规范hooks代码？</h3><p>eslint插件：<a href="https://www.npmjs.com/package/eslint-plugin-react-hooks">eslint-plugin-react-hooks</a></p>
<h3 id="hooks可以完全替换class吗？"><a href="#hooks可以完全替换class吗？" class="headerlink" title="hooks可以完全替换class吗？"></a>hooks可以完全替换class吗？</h3><p>如果涉及到 getSnapshotBeforeUpdate()和componentDidCatch()的话，那么不可以。也就是说其他的情况完全可以替换掉。</p>
<h2 id="使用Hooks"><a href="#使用Hooks" class="headerlink" title="使用Hooks"></a>使用Hooks</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add react@^16.8.0 react-dom@^16.8.0</span><br></pre></td></tr></table></figure>

<p>eslint 插件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn add eslint-plugin-react-hooks@next --dev</span><br></pre></td></tr></table></figure>

<p>eslintrc配置需要增加如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;plugins&quot;</span>: [</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="string">&quot;react-hooks&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">&quot;rules&quot;</span>: &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="string">&quot;react-hooks/rules-of-hooks&quot;</span>: <span class="string">&quot;error&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="get-start"><a href="#get-start" class="headerlink" title="get start"></a>get start</h3><p>更多hooks的说明和使用可以看一下这个简单的DEMO，包括基础的hooks和hooks的规则，以及一个todo的例子。</p>
<p><a href="https://github.com/Topppy/react-hook-tutorial">DEMO</a></p>
]]></content>
      <tags>
        <tag>react</tag>
        <tag>hooks</tag>
      </tags>
  </entry>
  <entry>
    <title>react 组件脚手架：nwb vs Neutrino</title>
    <url>/hexo-blog/2023/10/08/react-%E7%BB%84%E4%BB%B6%E8%84%9A%E6%89%8B%E6%9E%B6%EF%BC%9Anwb-vs-Neutrino/</url>
    <content><![CDATA[<h2 id="nwb"><a href="#nwb" class="headerlink" title="nwb"></a>nwb</h2><ul>
<li>2年没更新</li>
<li>构建结果只babel，不webpack</li>
<li>配置项少，开箱即用，灵活度低</li>
</ul>
<h2 id="Neutrino"><a href="#Neutrino" class="headerlink" title="Neutrino"></a>Neutrino</h2><ul>
<li>React 官方推荐最新</li>
<li>配置多 &amp; 灵活</li>
<li>构建结果走webpack</li>
</ul>
<h2 id="HaveDone"><a href="#HaveDone" class="headerlink" title="HaveDone"></a>HaveDone</h2><ul>
<li>Neutrino 默认production构建会单拆css文件出来</li>
<li>css Module的配置需要改动（个人需要）</li>
<li>如何加postcssLoader,   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  style: &#123;</span><br><span class="line">    // 这个默认配置是 /\.module.css$/, 导致无法识别.css后缀的为css module文件</span><br><span class="line">    modulesTest: /\.css$/,</span><br><span class="line">    // 这个默认在production下开启，会拆分出单独的css文件，导致样式失效</span><br><span class="line">    extract: false,</span><br><span class="line">    loaders: [</span><br><span class="line">      // Define loaders as objects. Note: loaders must be specified in reverse order.</span><br><span class="line">      // ie: for the loaders below the actual execution order would be:</span><br><span class="line">      // input file -&gt; sass-loader -&gt; postcss-loader -&gt; css-loader -&gt; style-loader/mini-css-extract-plugin</span><br><span class="line">      &#123;</span><br><span class="line">        loader: &#x27;postcss-loader&#x27;,</span><br><span class="line">        options: &#123;</span><br><span class="line">          plugins: [</span><br><span class="line">            require(&#x27;postcss-flexbugs-fixes&#x27;),</span><br><span class="line">            require(&#x27;postcss-preset-env&#x27;)(&#123;</span><br><span class="line">              autoprefixer: &#123;</span><br><span class="line">                flexbox: &#x27;no-2009&#x27;,</span><br><span class="line">              &#125;,</span><br><span class="line">              stage: 3,</span><br><span class="line">            &#125;),</span><br><span class="line">            require(&#x27;postcss-normalize&#x27;)(),</span><br><span class="line">          ],</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;),</span><br></pre></td></tr></table></figure></li>
<li>使用自定义eslint，建立自定义的eslintrc.js文件，并配置  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">useEslintrc: true,</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>react16剖析和升级</title>
    <url>/hexo-blog/2023/10/07/react16%E5%89%96%E6%9E%90%E5%92%8C%E5%8D%87%E7%BA%A7/</url>
    <content><![CDATA[<p>这个是因为给一个线上项目升级了16，做了一次分享，涉及到fiber和生命周期的迭代。先占位一下。主要是需要时间来把ppt整理成markdown。。。（懒惰的溜走）</p>
]]></content>
  </entry>
  <entry>
    <title>react懒加载</title>
    <url>/hexo-blog/2023/10/08/react%E6%87%92%E5%8A%A0%E8%BD%BD/</url>
    <content><![CDATA[<p>其实官方提供了非常简单的使用例子，配合suspense使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const A = React.lazy(() =&gt; import( &#x27;./a.js&#x27;));</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">return (</span><br><span class="line">  &lt;Suspense fallback=&#123;&lt;Loader /&gt;&#125;&gt;</span><br><span class="line">    &lt;A/&gt;</span><br><span class="line">  &lt;/Suspense&gt;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>这样就可以实现懒加载A<br>如果我有很多组件需要懒加载，每个又很小只有几k，可以把他们打包到一个命名chunk中，比如async。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const A = React.lazy(() =&gt; import(/* webpackChunkName: &quot;async&quot; */ &#x27;./a.js&#x27;));</span><br><span class="line">const B = React.lazy(() =&gt; import(/* webpackChunkName: &quot;async&quot; */ &#x27;./b.js&#x27;));</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">return (</span><br><span class="line">  &lt;Suspense fallback=&#123;&lt;Loader /&gt;&#125;&gt;</span><br><span class="line">    &lt;A/&gt;</span><br><span class="line">    &lt;B/&gt;</span><br><span class="line">  &lt;/Suspense&gt;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>如果我的组件B是需要用户点击交互之后才会加载，那么用户就会在一个loading的页面等待一段时间，但是实际上我可以在用户点击之前就主动去加载这个组件，这样用户用到的时候就可以直接看到B了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const A = React.lazy(() =&gt; import(/* webpackChunkName: &quot;async&quot; */ &#x27;./a.js&#x27;));</span><br><span class="line">const B = React.lazy(() =&gt; import(/* webpackChunkName: &quot;async&quot; */ &#x27;./b.js&#x27;));</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">return (</span><br><span class="line">  &lt;Suspense fallback=&#123;&lt;Loader /&gt;&#125;&gt;</span><br><span class="line">    &lt;A/&gt;</span><br><span class="line">    &#123;BVisible ? (</span><br><span class="line">       &lt;B /&gt;</span><br><span class="line">    ) : null&#125;</span><br><span class="line">  &lt;/Suspense&gt;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>参考：<a href="https://hackernoon.com/lazy-loading-and-preloading-components-in-react-16-6-804de091c82d">https://hackernoon.com/lazy-loading-and-preloading-components-in-react-16-6-804de091c82d</a></p>
]]></content>
  </entry>
  <entry>
    <title>spiral-matrix-js</title>
    <url>/hexo-blog/2016/09/01/spiral-matrix-js/</url>
    <content><![CDATA[<h1 id="螺旋矩阵算法-js-实现"><a href="#螺旋矩阵算法-js-实现" class="headerlink" title="螺旋矩阵算法 js 实现"></a>螺旋矩阵算法 js 实现</h1><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>腾讯的一道笔试题，自己用 js 来实现下。</p>
<span id="more"></span>

<h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><p>输入矩阵阶数 n ，生成螺旋矩阵，从左到右遍历每一行输出一个字符串。</p>
<p>eg：n&#x3D;3，矩阵为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 2 3</span><br><span class="line">8 9 4</span><br><span class="line">7 6 5</span><br><span class="line"></span><br><span class="line">输出为：</span><br><span class="line"></span><br><span class="line">1 2 3 8 9 4 7 6 5</span><br></pre></td></tr></table></figure>

<h4 id="套路是这样的"><a href="#套路是这样的" class="headerlink" title="套路是这样的"></a>套路是这样的</h4><p>一言不合就上图</p>


<ol>
<li>先确定要循环多少圈，代码最外层的循环数目即圈数。</li>
<li>把每一圈分割好，分成四个方向的步骤，然后确定每个方向的循环数量，重点是确定循环的终止条件点</li>
<li>要是矩形的阶是奇数，那么矩形的中心点就是阶数的平方。</li>
<li>j 将生成的矩阵输出成一行</li>
</ol>
<p>一言不合就上代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">spiral</span>(<span class="params">n</span>) &#123;</span><br><span class="line">  <span class="comment">//异常处理</span></span><br><span class="line">  <span class="keyword">if</span> (!n || <span class="keyword">typeof</span> n !== <span class="string">&quot;number&quot;</span> || n &lt; <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//特殊情况 n === 1 直接输出</span></span><br><span class="line">  <span class="keyword">if</span> (n === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//a为结果数组，m为循环圈数</span></span><br><span class="line">  <span class="keyword">var</span> a = [],</span><br><span class="line">    m = <span class="title class_">Math</span>.<span class="title function_">floor</span>(n / <span class="number">2</span>);</span><br><span class="line">  <span class="comment">//i、j分别为横向、纵向循环变量，k为圈数循环变量，base为当前打印数</span></span><br><span class="line">  <span class="keyword">var</span> i = <span class="number">0</span>,</span><br><span class="line">    j = <span class="number">0</span>,</span><br><span class="line">    k = <span class="number">0</span>,</span><br><span class="line">    base = <span class="number">1</span>;</span><br><span class="line">  <span class="comment">//初始化二维数组</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    a[i] = [];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//套路开始</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> k = <span class="number">0</span>; k &lt; m; k++) &#123;</span><br><span class="line">    <span class="comment">//向右，i++; i = k, j=k 将起点置为该圈的左上角；每圈的每个方向有n-2*k-1个数</span></span><br><span class="line">    <span class="keyword">for</span> (i = k, j = k; i &lt; n - k - <span class="number">1</span>; i++) &#123;</span><br><span class="line">      a[i][j] = base++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//向下，j++</span></span><br><span class="line">    <span class="keyword">for</span> (j = k; j &lt; n - k - <span class="number">1</span>; j++) &#123;</span><br><span class="line">      a[i][j] = base++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//向左，i--</span></span><br><span class="line">    <span class="keyword">for</span> (i = n - k - <span class="number">1</span>; i &gt; k; i--) &#123;</span><br><span class="line">      a[i][j] = base++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//向上，j--</span></span><br><span class="line">    <span class="keyword">for</span> (j = n - k - <span class="number">1</span>; j &gt; k; j--) &#123;</span><br><span class="line">      a[i][j] = base++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//若n为奇数，赋值中心点</span></span><br><span class="line">    <span class="keyword">if</span> (n % <span class="number">2</span>) &#123;</span><br><span class="line">      a[m][m] = n * n;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//打印数组</span></span><br><span class="line">  <span class="comment">//console.log(a);</span></span><br><span class="line">  <span class="comment">//将数组一行输出</span></span><br><span class="line">  <span class="keyword">var</span> str = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">      str += a[j][i];</span><br><span class="line">      <span class="keyword">if</span> (i === n - <span class="number">1</span> &amp;&amp; j === n - <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      str += <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(str);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="title function_">spiral</span>(<span class="number">4</span>);</span><br></pre></td></tr></table></figure>


]]></content>
      <tags>
        <tag>算法</tag>
        <tag>spiral matrix</tag>
      </tags>
  </entry>
  <entry>
    <title>ts笔记: Everyday Types</title>
    <url>/hexo-blog/2023/10/16/ts%E7%AC%94%E8%AE%B0-Everyday-Types/</url>
    <content><![CDATA[<p><a href="https://www.typescriptlang.org/docs/handbook/2/everyday-types.html">https://www.typescriptlang.org/docs/handbook/2/everyday-types.html</a></p>
<h2 id="字面量类型推断"><a href="#字面量类型推断" class="headerlink" title="字面量类型推断"></a>字面量类型推断</h2><p>数字和字符串的字面量会被推断为 number 和string类型，所以常见的报错：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const req = &#123; url: &quot;https://example.com&quot;, method: &quot;GET&quot; &#125;;</span><br><span class="line">handleRequest(req.url, req.method);</span><br><span class="line"></span><br><span class="line">&gt; Argument of type &#x27;string&#x27; is not assignable to parameter of type &#x27;&quot;GET&quot; | &quot;POST&quot;&#x27;.</span><br></pre></td></tr></table></figure>
<p>的解决方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// Change 1:</span><br><span class="line">const req = &#123; url: &quot;https://example.com&quot;, method: &quot;GET&quot; as &quot;GET&quot; &#125;;</span><br><span class="line">// Change 2</span><br><span class="line">handleRequest(req.url, req.method as &quot;GET&quot;);</span><br></pre></td></tr></table></figure>


<h2 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h2><p>ts 不允许 ‘不可能’的类型断言。比如 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const x = &quot;hello&quot; as number;</span><br><span class="line"></span><br><span class="line">&gt; Conversion of type &#x27;string&#x27; to type &#x27;number&#x27; may be a mistake because neither type sufficiently overlaps with the other. If this was intentional, convert the expression to &#x27;unknown&#x27; first.</span><br></pre></td></tr></table></figure>

<p>这种情况下的解决方法就是断言2次，先转化为any&#x2F;unknown， 再断言为其他类型</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const a = (expr as any) as T;</span><br></pre></td></tr></table></figure>



<h2 id="Type-和-Interface的区别"><a href="#Type-和-Interface的区别" class="headerlink" title="Type 和 Interface的区别"></a>Type 和 Interface的区别</h2><p>Type 创建后不可二次修改， Interface 始终可扩展编辑的<br><img src="https://user-images.githubusercontent.com/9689442/167623878-47bc3bcc-b4da-4eae-a749-29ebe6c7b591.png" alt="image"></p>
<h2 id="联合类型使用"><a href="#联合类型使用" class="headerlink" title="联合类型使用"></a>联合类型使用</h2><p>type U&#x3D; A｜B</p>
<p>如果使用的是A 跟B都有的属性，那么ts不会报错，<br>如果使用的是A或者 B 独有的属性，那么使用前需要先判断具体是哪一个类型，ts才不会报错。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function printId(id: number | string) &#123;</span><br><span class="line">  if (typeof id === &quot;string&quot;) &#123;</span><br><span class="line">    // In this branch, id is of type &#x27;string&#x27;</span><br><span class="line">    console.log(id.toUpperCase());</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    // Here, id is of type &#x27;number&#x27;</span><br><span class="line">    console.log(id);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://jkchao.github.io/typescript-book-chinese/typings/discrominatedUnion.html#%E8%AF%A6%E7%BB%86%E7%9A%84%E6%A3%80%E6%9F%A5">https://jkchao.github.io/typescript-book-chinese/typings/discrominatedUnion.html#%E8%AF%A6%E7%BB%86%E7%9A%84%E6%A3%80%E6%9F%A5</a></p>
<h2 id="Null-和-Undefined"><a href="#Null-和-Undefined" class="headerlink" title="Null 和 Undefined"></a>Null 和 Undefined</h2><p>项目建议开启 strictNullChecks</p>
<p>如果你知道变量一定存在，则可以使用：非空断言操作符 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function liveDangerously(x?: number | null) &#123;</span><br><span class="line">  // No error</span><br><span class="line">  console.log(x!.toFixed());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>ts笔记：More on Functions</title>
    <url>/hexo-blog/2023/10/18/ts%E7%AC%94%E8%AE%B0%EF%BC%9AMore-on-Functions/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://www.typescriptlang.org/docs/handbook/2/functions.html">https://www.typescriptlang.org/docs/handbook/2/functions.html</a></p>
</blockquote>
<h2 id="函数声明"><a href="#函数声明" class="headerlink" title="函数声明"></a>函数声明</h2><p>两种：</p>
<ol>
<li><p>箭头函数式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function greeter(fn: (a: string) =&gt; void) &#123;</span><br><span class="line">  fn(&quot;Hello, World&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>对象式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type DescribableFunction = &#123;</span><br><span class="line">  (someArg: number): boolean;</span><br><span class="line">&#125;;</span><br><span class="line">function doSomething(fn: DescribableFunction) &#123;</span><br><span class="line">  console.log( fn(6));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这种允许声明函数属性:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type DescribableFunction = &#123;</span><br><span class="line">  description: string;</span><br><span class="line">  (someArg: number): boolean;</span><br><span class="line">&#125;;</span><br><span class="line">function doSomething(fn: DescribableFunction) &#123;</span><br><span class="line">  console.log(fn.description + &quot; returned &quot; + fn(6));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>允许重载声明</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type DescribableFunction = &#123;</span><br><span class="line">  (someArg: number): boolean;</span><br><span class="line">  (someArg: string): boolean;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">function doSomething(fn: DescribableFunction) &#123;</span><br><span class="line">  console.log( fn(6));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>允许声明构造函数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type SomeConstructor = &#123;</span><br><span class="line">  new (s: string): SomeObject;</span><br><span class="line">&#125;;</span><br><span class="line">function fn(ctor: SomeConstructor) &#123;</span><br><span class="line">  return new ctor(&quot;hello&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>那么既支持new操作符也支持直接调用的函数，可以利用重载+new声明：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">interface CallOrConstruct &#123;</span><br><span class="line">  new (s: string): Date;</span><br><span class="line">  (n?: number): number;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><p>为了解决支持不同类型参数的通用函数的声明问题。我们声明一个类型的变量：泛型，用来指代未知的类型。可以理解为一元一次数学方程中的x变量： 2x+1&#x3D;5， 只要x能满足函数方程就可以，x可以是任何类型。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function firstElement&lt;Type&gt;(arr: Type[]): Type | undefined &#123;</span><br><span class="line">  return arr[0];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// s is of type &#x27;string&#x27;</span><br><span class="line">const s = firstElement([&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]);</span><br><span class="line">// n is of type &#x27;number&#x27;</span><br><span class="line">const n = firstElement([1, 2, 3]);</span><br><span class="line">// u is of type undefined</span><br><span class="line">const u = firstElement([]);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>上例中，泛型Type的具体类型是ts推断出来的，我们没有明确的手动告诉ts。</p>
</blockquote>
<p>也可以约束泛型坍塌为具有某些特性的类型。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function longest&lt;Type extends &#123; length: number &#125;&gt;(a: Type, b: Type) &#123;</span><br><span class="line">  if (a.length &gt;= b.length) &#123;</span><br><span class="line">    return a;</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    return b;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">// longerArray is of type &#x27;number[]&#x27;</span><br><span class="line">const longerArray = longest([1, 2], [1, 2, 3]);</span><br><span class="line">// longerString is of type &#x27;alice&#x27; | &#x27;bob&#x27;</span><br><span class="line">const longerString = longest(&quot;alice&quot;, &quot;bob&quot;);</span><br><span class="line">// Error! Numbers don&#x27;t have a &#x27;length&#x27; property</span><br><span class="line">const notOK = longest(10, 100);</span><br></pre></td></tr></table></figure>
<p>更严谨的可以手动指定类型（有时候ts没那么“聪明”可以自己推断出正确的类型）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function combine&lt;Type&gt;(arr1: Type[], arr2: Type[]): Type[] &#123;</span><br><span class="line">  return arr1.concat(arr2);</span><br><span class="line">&#125;</span><br><span class="line">const arr = combine&lt;string | number&gt;([1, 2, 3], [&quot;hello&quot;]);</span><br></pre></td></tr></table></figure>




<h2 id="泛型的实践指南"><a href="#泛型的实践指南" class="headerlink" title="泛型的实践指南"></a>泛型的实践指南</h2><h4 id="类型参数下移-泛型尽可能下沉到类型的叶子结点，-别太“泛”了"><a href="#类型参数下移-泛型尽可能下沉到类型的叶子结点，-别太“泛”了" class="headerlink" title="类型参数下移(泛型尽可能下沉到类型的叶子结点， 别太“泛”了)"></a>类型参数下移(泛型尽可能下沉到类型的叶子结点， 别太“泛”了)</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function firstElement1&lt;Type&gt;(arr: Type[]) &#123;</span><br><span class="line">  return arr[0];</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">function firstElement2&lt;Type extends any[]&gt;(arr: Type) &#123;</span><br><span class="line">  return arr[0];</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">// a: number (good)</span><br><span class="line">const a = firstElement1([1, 2, 3]);</span><br><span class="line">// b: any (bad)</span><br><span class="line">const b = firstElement2([1, 2, 3]);</span><br></pre></td></tr></table></figure>
<p>这里 第二种写法跟any一样，泛型白用</p>
<h4 id="尽可能减少泛型的数量（能用一个-就不要用两个0"><a href="#尽可能减少泛型的数量（能用一个-就不要用两个0" class="headerlink" title="尽可能减少泛型的数量（能用一个 就不要用两个0"></a>尽可能减少泛型的数量（能用一个 就不要用两个0</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function filter1&lt;Type&gt;(arr: Type[], func: (arg: Type) =&gt; boolean): Type[] &#123;</span><br><span class="line">  return arr.filter(func);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">function filter2&lt;Type, Func extends (arg: Type) =&gt; boolean&gt;(</span><br><span class="line">  arr: Type[],</span><br><span class="line">  func: Func</span><br><span class="line">): Type[] &#123;</span><br><span class="line">  return arr.filter(func);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里Func就是一个没啥用的泛型</p>
<h4 id="泛型变量应该出现2次（如果这个变量不会用到第二次，那为啥要声明这个泛型呢？）"><a href="#泛型变量应该出现2次（如果这个变量不会用到第二次，那为啥要声明这个泛型呢？）" class="headerlink" title="泛型变量应该出现2次（如果这个变量不会用到第二次，那为啥要声明这个泛型呢？）"></a>泛型变量应该出现2次（如果这个变量不会用到第二次，那为啥要声明这个泛型呢？）</h4><p>反例：Str 不如直接用string</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function greet&lt;Str extends string&gt;(s: Str) &#123;</span><br><span class="line">  console.log(&quot;Hello, &quot; + s);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">greet(&quot;world&quot;);</span><br></pre></td></tr></table></figure>








<h2 id="在函数中声明this"><a href="#在函数中声明this" class="headerlink" title="在函数中声明this"></a>在函数中声明this</h2><p>大部分时候ts通过推断来判断this指向谁，但是js里this的指向的判定规则还蛮复杂的，ts支持我们告诉他this应该是谁</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const user = &#123;</span><br><span class="line">  id: 123,</span><br><span class="line"> </span><br><span class="line">  admin: false,</span><br><span class="line">  becomeAdmin: function () &#123;</span><br><span class="line">    this.admin = true;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">interface DB &#123;</span><br><span class="line">  filterUsers(filter: (this: User) =&gt; boolean): User[];</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">const db = getDB();</span><br><span class="line">// 这里我们声明，this的类型应该是User</span><br><span class="line">const admins = db.filterUsers(function (this: User) &#123;</span><br><span class="line">  return this.admin;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>这种技巧非常适合在回调函数的类型声明中使用，</p>
]]></content>
  </entry>
  <entry>
    <title>typescript的eslint自定义rule：校验type类型注释</title>
    <url>/hexo-blog/2023/10/25/typescript%E7%9A%84eslint%E8%87%AA%E5%AE%9A%E4%B9%89rule%EF%BC%9A%E6%A0%A1%E9%AA%8Ctype%E7%B1%BB%E5%9E%8B%E6%B3%A8%E9%87%8A/</url>
    <content><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>dts文件or 一些ts的types声明缺少注释的情况下，不仅可读性差，也无法体验到vscode智能提示的优势。</p>
<p>考虑自己写一个eslint rule，大概思路是解析AST的一些节点前面没有comments就报错,。</p>
<p>具体执行步骤是先看看官方的eslint（ts的）开发文档，看一下别的comments相关的rules是怎么写的，有了基础的了解之后，评估是否有可行的方案，并设计方案 &amp; 写代码实现。</p>
<h2 id="学习准备"><a href="#学习准备" class="headerlink" title="学习准备"></a>学习准备</h2><p>eslint插件开发文档：<a href="https://eslint.org/docs/latest/developer-guide/working-with-rules#contextoptions">https://eslint.org/docs/latest/developer-guide/working-with-rules#contextoptions</a><br>typescript-eslint插件开发文档：<a href="https://typescript-eslint.io/docs/development/custom-rules">https://typescript-eslint.io/docs/development/custom-rules</a><br>typescript的AST playground：<a href="https://typescript-eslint.io/play/#ts=4.7.2&sourceType=module&showAST=ts">https://typescript-eslint.io/play/#ts=4.7.2&amp;sourceType=module&amp;showAST=ts</a></p>
<h2 id="开发项目"><a href="#开发项目" class="headerlink" title="开发项目"></a>开发项目</h2><p><a href="https://github.com/Topppy/require-dts-comment">https://github.com/Topppy/require-dts-comment</a></p>
]]></content>
  </entry>
  <entry>
    <title>use-quicklink</title>
    <url>/hexo-blog/2019/02/12/use-quicklink/</url>
    <content><![CDATA[<h1 id="使用quickLink来提升用户体验"><a href="#使用quickLink来提升用户体验" class="headerlink" title="使用quickLink来提升用户体验"></a>使用quickLink来提升用户体验</h1><h2 id="quickLink是什么"><a href="#quickLink是什么" class="headerlink" title="quickLink是什么"></a>quickLink是什么</h2><p><a href="https://github.com/GoogleChromeLabs/quicklink">quickLink</a>是谷歌实验室推出的一个库，这个库实现了在浏览器的空闲时间预先拉取页面内的链接，加速后序页面的加载速度的功能。</p>
<span id="more"></span>

<p>就是说，用了他们这个东西，可以提前拉取当前页面的链接，这些链接都是用户可能点击访问的，这样用户真正点击的时候，浏览器已经预先拉取了这个地址，速度就要比普通的加载要快。</p>
<h3 id="什么时候让浏览器去拉取页面内的链接呢？"><a href="#什么时候让浏览器去拉取页面内的链接呢？" class="headerlink" title="什么时候让浏览器去拉取页面内的链接呢？"></a>什么时候让浏览器去拉取页面内的链接呢？</h3><p>预先拉取链接能提升加载速度确实很好，但是这个行为也是需要耗费浏览器资源的，这里，有一个问题，什么时候去拉取。</p>
<h4 id="首先可以肯定的是，不能耽误当前页面的渲染和加载。"><a href="#首先可以肯定的是，不能耽误当前页面的渲染和加载。" class="headerlink" title="首先可以肯定的是，不能耽误当前页面的渲染和加载。"></a>首先可以肯定的是，不能耽误当前页面的渲染和加载。</h4><p>至少也要在我当前页完全渲染展示给用户，并且可以响应用户交互之后，再去干这些“锦上添花”的预拉取操作。聪明的你一定想到，在onload之后再去预拉取链接。如果链接很多，而此时，用户有了交互，当前页面内有动画等也要优先去响应，这时候怎么办？这就要注意下上文提到的关键点“在浏览器的空闲时间内”</p>
<h4 id="在浏览器空闲时间内预拉取"><a href="#在浏览器空闲时间内预拉取" class="headerlink" title="在浏览器空闲时间内预拉取"></a>在浏览器空闲时间内预拉取</h4><p>我如何知道浏览器什么时候处理完了交互动画等重要的事儿，空闲下来了呢？这就要提到一个浏览器的API，<a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/requestIdleCallback">requestIdleCallback</a>，这个API实现的就是在浏览器空闲的时候，可以执行一些回调。</p>
<p>另一个问题，如果页面内的链接非常多，我都要一次性拉取么？页面底部的链接，用户可能根本不会去访问。这种情况可以参考我们经常使用的一种优化，滚动懒加载。也就是说，只有可能要用到的时候，才去预取链接。</p>
<h3 id="检测视窗內的链接"><a href="#检测视窗內的链接" class="headerlink" title="检测视窗內的链接"></a>检测视窗內的链接</h3><p>quicklink使用<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Intersection_Observer_API">Intersection Observer API</a>来实现这个功能.</p>
<p>这个API可以做什么呢？”如果两个元素发生的交集部分在N%左右，我需要做处理一些事情(执行回调)”，它接收一个回调函数，这个回调函数，会在满足条件的时候被执行，而条件就是目标元素（target）和设备视窗／其他指定的元素（root）的发生交集时。</p>
<h2 id="quickLink怎么用"><a href="#quickLink怎么用" class="headerlink" title="quickLink怎么用"></a>quickLink怎么用</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add quicklink</span><br></pre></td></tr></table></figure>

<h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> quicklink <span class="keyword">from</span> <span class="string">&quot;quicklink/dist/quicklink.mjs&quot;</span>;</span><br><span class="line"><span class="title function_">quicklink</span>();</span><br></pre></td></tr></table></figure>
<p>这是最简单的用法，当然quick也接收一些参数</p>
<h4 id="API"><a href="#API" class="headerlink" title="API"></a>API</h4><p>主要的有这几个：</p>
<ul>
<li>el： 监测该元素进入视窗触发prefetch</li>
<li>urls： 需要预取URL数组</li>
<li>timeout：requestIdleCallback的回调有效期限</li>
<li>priority： 预取请求的优先级，fetch() 或者<link rel=prefetch><br>……</li>
</ul>
<p>更多使用例子见<a href="https://github.com/GoogleChromeLabs/quicklink#recipes">官方git</a></p>
<h4 id="polyfill"><a href="#polyfill" class="headerlink" title="polyfill"></a>polyfill</h4><p>这是一个实验性的库，并不是主流浏览器都支持的，它本身包含了一个小的requestIdleCallback的兼容，但是Intersection Observer API,就需要额外的手动添加polyfill</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn install intersection-observer</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;intersection-observer&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> quicklink <span class="keyword">from</span> <span class="string">&#x27;quicklink/dist/quicklink.mjs&#x27;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>prefetch</tag>
        <tag>quicklink</tag>
        <tag>用户体验</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack alias的vscode对应配置</title>
    <url>/hexo-blog/2023/10/07/webpack-alias%E7%9A%84vscode%E5%AF%B9%E5%BA%94%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>webpack 配置了alias，这个优点是少写很多..&#x2F;..&#x2F;..&#x2F;的相对路径的代码。</p>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>vscode 点击import的一个js文件的路径的时候，会跳转到对应文件并显示在编辑器里，配置了alias之后，vscode找不到例如<code>import a from ‘@/a’;</code>里面的路径 <code>@/a</code>。</p>
<h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>在根目录增加配置文件 <code>jsconfig.json</code>,增加如下配置</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;emitDecoratorMetadata&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;experimentalDecorators&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;baseUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;.&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;paths&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;@/*&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;./src/*&quot;</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>其中 paths里，跟你的webpack的alias配置一一对应。</p>
]]></content>
  </entry>
  <entry>
    <title>word-press-quick-start</title>
    <url>/hexo-blog/2016/07/30/word-press-quick-start/</url>
    <content><![CDATA[<h1 id="Wordpress-安装和使用"><a href="#Wordpress-安装和使用" class="headerlink" title="Wordpress 安装和使用"></a>Wordpress 安装和使用</h1><p>我们可以在本机安装 wordpress，从而能在本地建站，折腾并调试。本文将详细介绍如何在 Mac 下安装 wordpress。</p>
<span id="more"></span>

<p>[toc]</p>
<h2 id="首先安装-XAMPP"><a href="#首先安装-XAMPP" class="headerlink" title="首先安装 XAMPP"></a>首先安装 XAMPP</h2><h3 id="下载-xampp下载地址双击安装"><a href="#下载-xampp下载地址双击安装" class="headerlink" title="下载 xampp下载地址双击安装"></a>下载 xampp<a href="https://sourceforge.net/projects/xampp/files/">下载地址</a>双击安装</h3><h3 id="在终端中使用下面的命令启动-XAMPP："><a href="#在终端中使用下面的命令启动-XAMPP：" class="headerlink" title="在终端中使用下面的命令启动 XAMPP："></a>在终端中使用下面的命令启动 XAMPP：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo /Applications/XAMPP/xamppfiles/xampp start</span><br><span class="line"></span><br><span class="line">// 终端提示输入密码</span><br><span class="line">Password:</span><br><span class="line"></span><br><span class="line">// 密码输入后回车</span><br><span class="line">Starting XAMPP <span class="keyword">for</span> Mac OS X 5.6.21-0...</span><br><span class="line">XAMPP: Starting Apache...already running.</span><br><span class="line">XAMPP: Starting MySQL...ok.</span><br><span class="line">XAMPP: Starting ProFTPD...ok.</span><br><span class="line">// 启动成功</span><br></pre></td></tr></table></figure>

<p>安装成功之后在浏览器中输入 <code>http://localhost</code></p>
<img src="/hexo-blog/2016/07/30/word-press-quick-start/wp-1.png" class="" title="This is an example image">

<h2 id="为-wordpress-安装数据库"><a href="#为-wordpress-安装数据库" class="headerlink" title="为 wordpress 安装数据库"></a>为 wordpress 安装数据库</h2><p>wordpress 自身是不带数据库的，需要我们在 XAMPP 中创建数据库。在浏览器中输入：<a href="http://localhost/phpmyadmin/%EF%BC%8C%E8%BF%9B%E5%85%A5%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E7%95%8C%E9%9D%A2%E3%80%82%E8%BE%93%E5%85%A5%E6%95%B0%E6%8D%AE%E5%BA%93%E5%90%8D%EF%BC%9Awordpress_test%EF%BC%88%E5%8F%AF%E8%87%AA%E5%AE%9A%E4%B9%89%EF%BC%89%EF%BC%8C%E6%8E%92%E5%BA%8F%E8%A7%84%E5%88%99%E9%80%89%E6%8B%A9%EF%BC%9Autf8_general_ci">http://localhost/phpmyadmin/，进入数据库管理界面。输入数据库名：wordpress_test（可自定义），排序规则选择：utf8_general_ci</a></p>
<h2 id="下载-wordpress"><a href="#下载-wordpress" class="headerlink" title="下载 wordpress"></a>下载 wordpress</h2><p>下载 wordpress(最新版本)，然后解压 wordpress 至：&#x2F;Applications&#x2F;XAMPP&#x2F;xamppfiles&#x2F;htdocs&#x2F; 下</p>
<h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><p>拷贝 &#x2F;Applications&#x2F;XAMPP&#x2F;xamppfiles&#x2F;htdocs&#x2F;wordpress&#x2F;wp-config-sample.php 的内容至 新建的文件&#x2F;Applications&#x2F;XAMPP&#x2F;xamppfiles&#x2F;htdocs&#x2F;wordpress&#x2F;wp-config.php，然后用文本编辑器打开，进行如下三处修改：</p>
<ul>
<li>修改数据库名称 database_name_here 为你的数据库名</li>
<li>修改数据库用户名 username_here 为 root</li>
<li>修改数据库密码为空，就是把 password_here 删除</li>
</ul>
<h2 id="登陆-WordPress"><a href="#登陆-WordPress" class="headerlink" title="登陆 WordPress"></a>登陆 WordPress</h2><p>在浏览器中输入：<a href="http://localhost/wordpress/%EF%BC%8C%E4%BD%A0%E5%BA%94%E8%AF%A5%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E5%A6%82%E4%B8%8B%E8%AE%BE%E7%BD%AE%E9%A1%B5%E9%9D%A2">http://localhost/wordpress/，你应该可以看到如下设置页面</a></p>
<img src="/hexo-blog/2016/07/30/word-press-quick-start/wp-2.png" class="" title="This is an example image">
<p>在这个设置页面设置站点标题，登陆用户名，密码即可。然后就可以看到如下页面</p>
<img src="/hexo-blog/2016/07/30/word-press-quick-start/wp-3.jpg" class="" title="This is an example image">
<p>恭喜，wordpress 已经成功安装了</p>
<h2 id="更换主题及安装失败问题"><a href="#更换主题及安装失败问题" class="headerlink" title="更换主题及安装失败问题"></a>更换主题及安装失败问题</h2><p>有两种方法：</p>
<ol>
<li>下载主题包，解压，上传到服务器 wp-content&#x2F;themes 目录下，然后进入管理后台，启用新主题即可。</li>
<li>直接在后台主题管理处，根据需求搜索主题，然后点击安装，即可实现在线安装。</li>
</ol>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意:"></a>注意:</h3><p>在线安装主题、插件有可能会出现失败情况，错误提示是没有权限,<br>解决办法如下：<br>将 wp-content 文件夹的权限改为 755，将 wp-content&#x2F;theme 和 wp-content&#x2F;plugin 文件夹的权限改为 777。如果还是提示同样的错误无法安装主题和插件的话，那就只能将 wp-content 文件夹的权限改为 777（下策）。</p>
<h2 id="图片无法上传及大小限制问题"><a href="#图片无法上传及大小限制问题" class="headerlink" title="图片无法上传及大小限制问题"></a>图片无法上传及大小限制问题</h2><p>WordPress 管理后台支持图片上传，但是第一次使用时候报错（阿里云下 PHP+Apache+nginx 环境）,</p>
<h3 id="无法上传问题解决："><a href="#无法上传问题解决：" class="headerlink" title="无法上传问题解决："></a>无法上传问题解决：</h3><ol>
<li>uploads 文件夹不存在———新建该文件夹</li>
<li>数据库 wp_options 表的 uploads_path 键的值不为 wp-contents&#x2F;uploads——-输入该值</li>
<li>wp-content 权限改为 755 uploads 权限改为 777</li>
</ol>
<h3 id="大小限制-2M-问题—–解决"><a href="#大小限制-2M-问题—–解决" class="headerlink" title="大小限制 2M 问题—–解决:"></a>大小限制 2M 问题—–解决:</h3><ol>
<li>主机的 etc&#x2F;php5&#x2F;fpm 目录下 php.ini 文件修改以下字段的值如下</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">upload_max_filesize = 32M</span><br><span class="line">post_max_size = 32M</span><br><span class="line">max_execution_time = 300</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>cd 到 &#x2F;etc&#x2F;nigix&#x2F;目录下找到 nginx 的 config 文件 修改以下字段的值如下</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line"><span class="comment">#...</span></span><br><span class="line">    client_max_body_size 32M;</span><br><span class="line"><span class="comment">#...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>然后重启 php-fpm 和 nginx</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service nginx restart</span><br><span class="line">service php5-fpm restart</span><br></pre></td></tr></table></figure>

<p><a href="https://easyengine.io/tutorials/php/increase-file-upload-size-limit/">参考链接</a></p>
]]></content>
      <tags>
        <tag>wordpress</tag>
      </tags>
  </entry>
  <entry>
    <title>wx-mini-program-share</title>
    <url>/hexo-blog/2018/12/19/wx-mini-program-share/</url>
    <content><![CDATA[<h1 id="微信小程序右上角···转发"><a href="#微信小程序右上角···转发" class="headerlink" title="微信小程序右上角···转发"></a>微信小程序右上角···转发</h1><p><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/share.html">官方文档</a></p>
<p>这个转发功能是页面独立的，什么意思，就是微信小程序每一个页面的右上角的转发功能都是需要你配置才会出现。如果你有3个页，每个页都需要转发功能，那么你每个页面都需要配置下。</p>
<span id="more"></span>

<p>配置转发功能很简单，只需要在Page中增加事件处理函数onShareAppMessage, 只有定义了此事件处理函数，右上角菜单才会显示“转发”按钮. onShareAppMessage需要 return 一个 Object，用于自定义转发内容，包括标题，页面路径，转发图片。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">onShareAppMessage</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&#x27;转发标题&#x27;</span>,</span><br><span class="line">      <span class="comment">// default: 当前小程序名称</span></span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;转发路径，必须是以 / 开头的完整路径&#x27;</span>,</span><br><span class="line">      <span class="comment">// default: 当前页面 path ，</span></span><br><span class="line">      <span class="attr">imageUrl</span>: <span class="string">&#x27;自定义图片路径，可以是本地文件路径、代码包文件路径或者网络图片路径。支持PNG及JPG。显示图片长宽比是 5:4。&#x27;</span></span><br><span class="line">      <span class="comment">// default: 使用默认截图, 这个截图实测在部分手机上会出现黑色背景</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>wx</tag>
        <tag>小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>【drawio探秘】导入drawio输出的png图片可以二次编辑</title>
    <url>/hexo-blog/2023/10/25/%E3%80%90drawio%E6%8E%A2%E7%A7%98%E3%80%91%E5%AF%BC%E5%85%A5drawio%E8%BE%93%E5%87%BA%E7%9A%84png%E5%9B%BE%E7%89%87%E5%8F%AF%E4%BB%A5%E4%BA%8C%E6%AC%A1%E7%BC%96%E8%BE%91/</url>
    <content><![CDATA[<h2 id="猜测思路："><a href="#猜测思路：" class="headerlink" title="猜测思路："></a>猜测思路：</h2><ol>
<li>drawio保存时：png图片中额外保存了xml格式的图表信息，</li>
<li>drawio导入自己导出的png图片的时候，解析xml数据并替换png绘制图表到工作区</li>
</ol>
<p>在阅读到这篇文章后由了验证的方法</p>
<p><a href="https://blog.mythsman.com/post/5d2d62b4a2005d74040ef7eb/"><a href="https://blog.mythsman.com/post/5d2d62b4a2005d74040ef7eb/">PNG文件格式详解</a></a></p>
<p><img src="https://user-images.githubusercontent.com/9689442/210044015-88cfbe05-92dd-4ace-8046-063bd266e43e.png" alt="image"></p>
<p>首先使用工具<a href="https://www.nayuki.io/page/png-file-chunk-inspector">https://www.nayuki.io/page/png-file-chunk-inspector</a> 解码分析png的数据</p>
<p><img src="https://user-images.githubusercontent.com/9689442/210044042-27dc98fb-b257-4a48-a39a-b157a8483df7.png" alt="image"></p>
<p>可以看到文本信息数据块tEXt(textual data)内有xml数据，</p>
<p>我们复制出来Text string的值，经过decodeURIComponent处理后的到</p>
<p><img src="https://user-images.githubusercontent.com/9689442/210044054-21553522-e0a4-415b-abfc-820cd92fe8da.png" alt="image"></p>
<p>这段应该就是drawio保存的图表信息</p>
<h2 id="如何实现读取和写入"><a href="#如何实现读取和写入" class="headerlink" title="如何实现读取和写入"></a>如何实现读取和写入</h2><blockquote>
<p>如果需要使用 nodejs 对指定区进行修改和提取，则可以利用 <a href="https://www.npmjs.com/package/png-chunks-encode"><a href="https://www.npmjs.com/package/png-chunks-encode">png-chunks-encode</a></a><br> 和 <a href="https://www.npmjs.com/package/png-chunks-encode"><a href="https://www.npmjs.com/package/png-chunks-encode">png-chunks-extract</a></a></p>
</blockquote>
<ul>
<li>读取本地文件</li>
<li>提取tEXtchunk内容</li>
<li>修改并写入png</li>
<li>保存为png图片</li>
</ul>
<h2 id="DEMO"><a href="#DEMO" class="headerlink" title="DEMO"></a>DEMO</h2><p><a href="https://codesandbox.io/s/magicpng-y27un0?file=/src/App.js">https://codesandbox.io/s/magicpng-y27un0</a></p>
<h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p>xml在线format：<a href="https://jsonformatter.org/xml-editor">https://jsonformatter.org/xml-editor</a></p>
<p>pngchunk分析：<a href="https://www.nayuki.io/page/png-file-chunk-inspector">https://www.nayuki.io/page/png-file-chunk-inspector</a></p>
<p>pngcheck：</p>
<p><a href="http://www.libpng.org/pub/png/apps/pngcheck.html"><a href="http://www.libpng.org/pub/png/apps/pngcheck.html">pngcheck Home Page</a></a></p>
<p>png文件格式详解：<a href="https://blog.mythsman.com/post/5d2d62b4a2005d74040ef7eb/">https://blog.mythsman.com/post/5d2d62b4a2005d74040ef7eb/</a></p>
]]></content>
  </entry>
  <entry>
    <title>使用 electron13 + electron-react-boilerplate 一些包报错+native包问题</title>
    <url>/hexo-blog/2023/10/13/%E4%BD%BF%E7%94%A8-electron13-electron-react-boilerplate-%E4%B8%80%E4%BA%9B%E5%8C%85%E6%8A%A5%E9%94%99-native%E5%8C%85%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>能run起来的最粗暴的方式就是<br>把nodeIntegration打开，把contextIsolation关掉。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const config: BrowserWindowConstructorOptions = &#123;</span><br><span class="line">    show: false,</span><br><span class="line">    webPreferences: &#123;</span><br><span class="line">      nodeIntegration: true,</span><br><span class="line">      contextIsolation: false,</span><br><span class="line">      webSecurity: false,</span><br><span class="line">      preload: preloadPath,</span><br><span class="line">      enableRemoteModule: true,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>如果装native包，务必在 app&#x2F;release&#x2F;下安装，并且要使用 npm 而不是yarn.</p>
<p>electron-react-boilerplate 使用的rebuild版本有问题，直接升级到最新版本。</p>
<p>未解决问题。 基于ffi-napi 多次调用win32的方法，QueryDisplayConfig，node进程会直接中断退出。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import log from &#x27;electron-log&#x27;</span><br><span class="line"></span><br><span class="line">const ffi = require(&#x27;ffi-napi&#x27;)</span><br><span class="line">const ref = require(&#x27;ref-napi&#x27;) // 对接C++指针</span><br><span class="line">const refStruct = require(&#x27;ref-struct-napi&#x27;) // 对接C++结构体</span><br><span class="line">const refArray = require(&#x27;ref-array-napi&#x27;) // 对接C++数组</span><br><span class="line"></span><br><span class="line">// 屏幕的四种模式</span><br><span class="line"></span><br><span class="line">export const sdcApplay = 0x80 // 屏幕设置辅助参数</span><br><span class="line"></span><br><span class="line">export enum DisplayMode &#123;</span><br><span class="line">  internal = 1, // 仅电脑屏</span><br><span class="line">  clone = 2, // 复制</span><br><span class="line">  extend = 4, // 扩展</span><br><span class="line">  external = 8, // 仅第二屏幕</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 这两个结构体的内容太复杂，而且实际项目用不到，所以直接算一下结构体的大小填充个无用数据</span><br><span class="line">const DISPLAYCONFIG_PATH_INFO = refStruct(&#123;</span><br><span class="line">  unuse: refArray(ref.types.int, 72 / 4),</span><br><span class="line">&#125;)</span><br><span class="line">const DISPLAYCONFIG_MODE_INFO = refStruct(&#123;</span><br><span class="line">  unuse: refArray(ref.types.int, 64 / 4),</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">const PathArrayType = refArray(ref.refType(DISPLAYCONFIG_PATH_INFO))</span><br><span class="line">const ModeArrayType = refArray(ref.refType(DISPLAYCONFIG_MODE_INFO))</span><br><span class="line"></span><br><span class="line">const libm = ffi.Library(&#x27;user32&#x27;, &#123;</span><br><span class="line">  SetDisplayConfig: [&#x27;long&#x27;, [&#x27;int&#x27;, &#x27;pointer&#x27;, &#x27;int&#x27;, &#x27;pointer&#x27;, &#x27;int&#x27;]],</span><br><span class="line">  GetDisplayConfigBufferSizes: [</span><br><span class="line">    &#x27;long&#x27;,</span><br><span class="line">    [&#x27;int&#x27;, ref.refType(ref.types.int), ref.refType(ref.types.int)],</span><br><span class="line">  ],</span><br><span class="line">  QueryDisplayConfig: [</span><br><span class="line">    &#x27;long&#x27;,</span><br><span class="line">    [</span><br><span class="line">      &#x27;int&#x27;,</span><br><span class="line">      ref.refType(ref.types.int),</span><br><span class="line">      PathArrayType,</span><br><span class="line">      ref.refType(ref.types.int),</span><br><span class="line">      ModeArrayType,</span><br><span class="line">      ref.refType(ref.types.int),</span><br><span class="line">    ],</span><br><span class="line">  ],</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  setDisplayMode: (mode: DisplayMode) =&gt; &#123;</span><br><span class="line">    log.info(</span><br><span class="line">      &#x27;=====================================================================setDisplayMode&#x27;,</span><br><span class="line">      mode,</span><br><span class="line">    )</span><br><span class="line">    // eslint-disable-next-line no-bitwise</span><br><span class="line">    const re = libm.SetDisplayConfig(0, null, 0, null, sdcApplay | mode)</span><br><span class="line">    return re</span><br><span class="line">  &#125;,</span><br><span class="line">  getDisplayMode: () =&gt; &#123;</span><br><span class="line">    const requiredPaths = ref.alloc(ref.types.int)</span><br><span class="line">    const requiredModes = ref.alloc(ref.types.int)</span><br><span class="line">    // 获取QueryDisplayConfig的2-5参数，不用动</span><br><span class="line">    const result2 = libm.GetDisplayConfigBufferSizes(</span><br><span class="line">      2,</span><br><span class="line">      requiredPaths,</span><br><span class="line">      requiredModes,</span><br><span class="line">    )</span><br><span class="line">    log.info(result2, requiredPaths.deref(), requiredModes.deref())</span><br><span class="line"></span><br><span class="line">    const PathArray = refArray(DISPLAYCONFIG_PATH_INFO, requiredPaths.deref())</span><br><span class="line">    const ModeAyyay = refArray(DISPLAYCONFIG_MODE_INFO, requiredModes.deref())</span><br><span class="line">    const paths = new PathArray()</span><br><span class="line">    const modes = new ModeAyyay()</span><br><span class="line"></span><br><span class="line">    // 查询结果存储在flags</span><br><span class="line">    log.info(&#x27;new flags&#x27;)</span><br><span class="line">    const flags1 = ref.alloc(ref.types.int)</span><br><span class="line">    // 2到5参数没有用到，参数1是常量</span><br><span class="line">    log.info(&#x27;start get&#x27;)</span><br><span class="line">    libm.QueryDisplayConfig(</span><br><span class="line">      4,</span><br><span class="line">      requiredPaths,</span><br><span class="line">      paths.ref(),</span><br><span class="line">      requiredModes,</span><br><span class="line">      modes.ref(),</span><br><span class="line">      flags1,</span><br><span class="line">    )</span><br><span class="line">    // log.info(&#x27;save re&#x27;)</span><br><span class="line">    // const re = flags1.deref()</span><br><span class="line">    log.info(</span><br><span class="line">      &#x27;=====================================================================getDisplayMode&#x27;,</span><br><span class="line">      flags1.deref(),</span><br><span class="line">    )</span><br><span class="line">    return flags1.deref()</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>mac需要动态不引入win32的native包（会报错）</p>
<p>需要安装node-gyp构建环境（开发机 &amp; 打包机）</p>
<blockquote>
<p><a href="https://github.com/nodejs/node-gyp#on-windows">https://github.com/nodejs/node-gyp#on-windows</a><br>python 3.9 安装 + 环境变量（要选给all users 安装）<br> npm config set python “C:\Programs\Python\Python39\python.exe”<br>npm install windows-build-tools -g</p>
</blockquote>
<p>卡住解决：<a href="https://www.jianshu.com/p/e2f12fab2b78">https://www.jianshu.com/p/e2f12fab2b78</a></p>
<p>参考资料文档：</p>
<p>如何实现外界屏幕模式切换<br><a href="https://blog.csdn.net/wangyunman/article/details/103080818">https://blog.csdn.net/wangyunman/article/details/103080818</a><br>调用Windows API：SetDisplayConfig<br>调用displayswitch.exe 可以实现，但是会有一个切换的系统级UI变化，<a href="https://renenyffenegger.ch/notes/Windows/dirs/Windows/System32/DisplaySwitch_exe#:~:text=DisplaySwitch.exe%20can%20be%20used,the%20windows%2Bp%20keyboard%20shortcut">https://renenyffenegger.ch/notes/Windows/dirs/Windows/System32/DisplaySwitch_exe#:~:text=DisplaySwitch.exe%20can%20be%20used,the%20windows%2Bp%20keyboard%20shortcut</a>.</p>
<p>在 Electron 下调用 Win32 API 的经历</p>
<p>node 如何执行 windows API<br><a href="https://github.com/waitingsong/node-win32-api">https://github.com/waitingsong/node-win32-api</a></p>
<p>外部函数接口 FFI —— 虚拟机中重要但不起眼的组件<br><a href="https://zhuanlan.zhihu.com/p/32134367">https://zhuanlan.zhihu.com/p/32134367</a><br>node.js + Electron 调用 Windows API 踩坑日记<br><a href="https://blog.csdn.net/qq_21487663/article/details/111099822">https://blog.csdn.net/qq_21487663/article/details/111099822</a><br>electron怎么调用windows的api？</p>
<p>问题：</p>
<ol>
<li>electron 安装native包报错</li>
<li>win32-api没有这个方法</li>
</ol>
<p><a href="https://juejin.cn/post/6854573212341108749#heading-9">https://juejin.cn/post/6854573212341108749#heading-9</a></p>
<p><a href="https://blog.csdn.net/YW_yang/article/details/117434122">https://blog.csdn.net/YW_yang/article/details/117434122</a></p>
<p><a href="https://blog.csdn.net/weixin_40450855/article/details/109318361?spm=1001.2101.3001.6650.2&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-2.no_search_link&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-2.no_search_link&utm_relevant_index=4">https://blog.csdn.net/weixin_40450855/article/details/109318361?spm=1001.2101.3001.6650.2&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-2.no_search_link&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-2.no_search_link&amp;utm_relevant_index=4</a></p>
<p><a href="https://www.cnblogs.com/silenzio/p/11639960.html">https://www.cnblogs.com/silenzio/p/11639960.html</a></p>
<p>锁版本， 统一 编译需要的C++版本，python版本</p>
]]></content>
  </entry>
  <entry>
    <title>关于react hook 返回组件模式的讨论</title>
    <url>/hexo-blog/2023/10/19/%E5%85%B3%E4%BA%8Ereact-hook-%E8%BF%94%E5%9B%9E%E7%BB%84%E4%BB%B6%E6%A8%A1%E5%BC%8F%E7%9A%84%E8%AE%A8%E8%AE%BA/</url>
    <content><![CDATA[<h2 id="hook-return-component"><a href="#hook-return-component" class="headerlink" title="hook return component"></a>hook return component</h2><p>首先在react中：</p>
<ul>
<li>React Component &#x3D;&#x3D; UI</li>
<li>React Hook &#x3D;&#x3D; behavior&#x2F;Logic</li>
</ul>
<blockquote>
<p>hook的设计之初的几个点：</p>
<ul>
<li>解决“reuse stateful logic between components”的问题</li>
<li>允许按照功能划分复杂逻辑，而不是按照生命周期混在一起</li>
</ul>
<p>在hook出现之前，我们只可以将UI抽离成可以复用的component，但是相似的state和loggic还需要写很多遍。hook之后我们解决了这个问题。</p>
</blockquote>
<p>通常在业务中，UI和behavior是耦合的，强相关的，比如isOpen和closeModal通常跟Modal 组件强相关联，总是成对出现。<br>有时候，父组件需要使用behavior数据</p>
<ul>
<li>那么behavior数据应当被提升到父组件吗？即使behavior数据跟子组件强耦合。</li>
<li>例如：父组件创建了一个需要知道何时关闭的Modal组件以便取消请求。那么父组件只能管理isOpen状态吗？</li>
<li>behavior和component的绑定代码，还需要一遍遍重复吗？</li>
</ul>
<p>返回组件的模式可能是一个优雅的解决方案。【1】，在hook中，不仅抽离了state和逻辑，组件以及组件和hook的绑定也都放在hook中，hook 返回{ state, method, component }</p>
<p>就像这样：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import useMenu from &#x27;./useMenu&#x27;</span><br><span class="line"></span><br><span class="line">export const Demo = () =&gt; &#123;</span><br><span class="line">// 这里返回的Menu是一个组件，openMenu， closeMenu 是方法，isOpen是state</span><br><span class="line">const &#123; Menu, openMenu, closeMenu, isOpen &#125; = useMenu()</span><br><span class="line"></span><br><span class="line">return (</span><br><span class="line">    &lt;React.Fragment&gt;</span><br><span class="line">      &lt;Button onClick=&#123;openMenu&#125; variant=&quot;contained&quot;&gt;</span><br><span class="line">        Example Menu open ?：&#123; isOpen ? &#x27;yes&#x27; : &#x27;no&#x27;&#125;</span><br><span class="line">      &lt;/Button&gt;</span><br><span class="line"></span><br><span class="line">      &lt;Menu /&gt;</span><br><span class="line">    &lt;/React.Fragment&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>熟悉hook的一定可以注意到一点，Demo每次执行，useMenu都会执行一遍，返回新的component，这显然是不太完美的。</p>
<p>一个解决方案是：</p>
<ul>
<li>返回Component静态定义而不是Component实例</li>
<li>Returned Compoent和 hook 之间使用Context来共享数据和组件实例引用<blockquote>
<p>【2】Third iteration: Return statically defined component from hooks</p>
</blockquote>
</li>
</ul>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p>【1】<a href="https://dev.to/droopytersen/new-react-hooks-pattern-return-a-component-31bh">New React Hooks Pattern? Return a Component</a></p>
<p>【2】<a href="https://blog.bitsrc.io/new-react-design-pattern-return-component-from-hooks-79215c3eac00">React Design Patterns: Return Component From Hooks</a></p>
<p>【3】<a href="https://kentcdodds.com/blog/compound-components-with-react-hooks">React Hooks: Compound Components</a></p>
]]></content>
  </entry>
  <entry>
    <title>同地址，使用https和http交替请求跨域</title>
    <url>/hexo-blog/2023/10/08/%E5%90%8C%E5%9C%B0%E5%9D%80%EF%BC%8C%E4%BD%BF%E7%94%A8https%E5%92%8Chttp%E4%BA%A4%E6%9B%BF%E8%AF%B7%E6%B1%82%E8%B7%A8%E5%9F%9F/</url>
    <content><![CDATA[<p>这是因为，重复写了两个同样的cookie。<br>参考<a href="https://juejin.im/post/5c257ab0e51d4550442a66d9">掘金</a>。<br><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Origin#CORS_and_caching">MDN</a></p>
<p>解决办法： 服务器改下配置，Vary：Origin。or 浏览器清除缓存cookie。</p>
]]></content>
  </entry>
  <entry>
    <title>基于乐谱生成旋律路径动画（与音乐同步时间播放）</title>
    <url>/hexo-blog/2023/10/20/%E5%9F%BA%E4%BA%8E%E4%B9%90%E8%B0%B1%E7%94%9F%E6%88%90%E6%97%8B%E5%BE%8B%E8%B7%AF%E5%BE%84%E5%8A%A8%E7%94%BB%EF%BC%88%E4%B8%8E%E9%9F%B3%E4%B9%90%E5%90%8C%E6%AD%A5%E6%97%B6%E9%97%B4%E6%92%AD%E6%94%BE%EF%BC%89/</url>
    <content><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><ul>
<li>基于乐谱的音符时值和音高生成平滑曲线路径</li>
<li>以乐谱时间为x，沿路径运动动画</li>
</ul>
<p><a href="https://animejs.com/documentation/#motionPath"><a href="https://animejs.com/documentation/#motionPath">anime.js</a></a></p>
<p>animejs提供了svg路径动画能力，svg的点坐标是基于路径的长度获取的，整体的运动函数是线性函数，也就是说： </p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="title function_">f</span>(x,y) = path.<span class="title function_">getPointAtLength</span>(distance) </span><br><span class="line">distance = totalLength * t / duration = <span class="title function_">g</span>(totalLength, t)</span><br><span class="line"><span class="title function_">f</span>(x,y) = path.<span class="title function_">getPointAtLength</span>(totalLength * t / duration)</span><br><span class="line"><span class="title function_">f</span>(x,y) = <span class="title function_">p</span>(totalLength, t)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>时间t0点的 x坐标 取决于 路径总长度。不同乐谱在相同t0时间点的x坐标是不一致的。</p>
</blockquote>
<p><img src="https://user-images.githubusercontent.com/9689442/178916875-0fa5b1e0-0f87-4c23-a059-649844474d89.png" alt="image"></p>
<blockquote>
<p>图中红色为基于路径总长度的svg动画，黑色为linear直线动画，可以看到在当前时间点，x是对不上的。</p>
</blockquote>
<p>而我们需要的音乐路径动画，是无论是什么乐谱，在t0点的x坐标是一致的</p>
<p>即： y &#x3D; pathPoint(x) &#x3D; g(x)  ; x &#x3D; maxX * t&#x2F;duration &#x3D; f(t); </p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line">y = <span class="title function_">pathPoint</span>(x) = <span class="title function_">g</span>(x)  </span><br><span class="line">x = maxX * t/ duration</span><br><span class="line">maxX = step * duration</span><br><span class="line">x = step * t </span><br><span class="line">x = <span class="title function_">f</span>(t)</span><br></pre></td></tr></table></figure>

<p>或者降级为：音符内不严格 x&#x3D;f(t), 每个音符结束的时间点符合 x &#x3D; f(t);</p>
<h2 id="实现正比于x-t的路径动画"><a href="#实现正比于x-t的路径动画" class="headerlink" title="实现正比于x|t的路径动画"></a>实现正比于x|t的路径动画</h2><p>切分乐谱的总svg路径，每个音符的svg为一个path，每个path生成一个路径动画，duration &#x3D;  音符持续时间，全部动画拼成一个timeline，总时长&#x3D; 乐谱时长， （中间休止符需要补全直线？）</p>
<p><img src="https://user-images.githubusercontent.com/9689442/178916875-0fa5b1e0-0f87-4c23-a059-649844474d89.png" alt="image"></p>
<blockquote>
<p>图中蓝色块为每个音符起止时间点与x对应的动画（音符区间内x、t不严格对应）</p>
</blockquote>
<p>demo：</p>
<p><a href="https://codepen.io/Topppy/pen/dymGGrb">https://codepen.io/Topppy/pen/dymGGrb</a></p>
<ul>
<li>块1是x线性t的位移</li>
<li>块2是一整条svg路径动画</li>
<li>块3是两段path拼接的一条svg路径</li>
</ul>
<p>块1作为基准，可以看出块2全程x都与块1无法对齐，块2在中间点和结束点是对齐的，但是中间的不规则路径跟块1的x位移没有对齐，点击seek1按钮定位时间到中间点，可以明显看出来。</p>
<p>块3是可以降级满足音乐旋律路径走谱的。</p>
<h2 id="根据乐谱绘制平滑旋律路径"><a href="#根据乐谱绘制平滑旋律路径" class="headerlink" title="根据乐谱绘制平滑旋律路径"></a>根据乐谱绘制平滑旋律路径</h2><p>乐谱中需要占据时间的节点有两种</p>
<ul>
<li>音符（svg C）</li>
<li>休止符（svg L&#x2F;H），（也可以忽略休止符）</li>
</ul>
<p>数据处理逻辑：（具体可以参考d3）</p>
<ul>
<li><del>点数据： 合并有序数组音符（notes） 和 休止符（rests）</del></li>
<li>C曲线控制点数据： （这里percentage &#x3D; 0.5）<ul>
<li>控制点1:  [x0 + 0.5 * (x1-x0), y0]</li>
<li>控制点2:  [x0 + 0.5 * (x1-x0), y1]</li>
</ul>
</li>
<li>svgPathList：<ul>
<li>如果onset&#x3D;0的点不是note, 需要从（0，0）开始</li>
<li>终点（score.duration, 0）</li>
</ul>
</li>
</ul>
<p><img src="https://user-images.githubusercontent.com/9689442/178715028-ec64e731-fc7b-4379-8e8a-28df7e89abbc.jpg" alt="IMG_6772"></p>
<p>曲线的的曲率变化</p>
<p>对称：p1.x &#x3D;distance(x1,x2)- p2.x</p>
<p>非对称： p1.x &#x3D; p2.x</p>
<p>也可以独立控制两个控制点的x的percentage</p>
<p><img src="https://user-images.githubusercontent.com/9689442/178714998-b3e4cc27-da83-47ac-b1db-8a23ca85326b.jpg" alt="IMG_6771"></p>
<p>最后demo：</p>
<p><a href="https://codepen.io/Topppy/pen/JjLGmBd?editors=1010">https://codepen.io/Topppy/pen/JjLGmBd?editors=1010</a></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>svg路径编辑器</p>
<p><a href="https://yqnn.github.io/svg-path-editor/"><a href="https://yqnn.github.io/svg-path-editor/">SvgPathEditor</a></a></p>
<p>d3的curve效果：<a href="https://github.com/d3/d3-shape/blob/v3.1.0/README.md#curves">https://github.com/d3/d3-shape/blob/v3.1.0/README.md#curves</a></p>
<p>d3的natural curve 源码:<a href="https://github.com/d3/d3-shape/blob/main/src/curve/natural.js">https://github.com/d3/d3-shape/blob/main/src/curve/natural.js</a></p>
<p>web audio 调节播放音频的音高 ： <a href="https://zpl.fi/pitch-shifting-in-web-audio-api/">https://zpl.fi/pitch-shifting-in-web-audio-api/</a></p>
<p>midi文件格式解析：<a href="https://www.jianshu.com/p/59d74800b43b">https://www.jianshu.com/p/59d74800b43b</a>   </p>
<p> Magenta魔改记-2：数据格式与数据集（涉及midi和mxl格式对比<a href="https://zhuanlan.zhihu.com/p/49539387">https://zhuanlan.zhihu.com/p/49539387</a></p>
<p>乐谱渲染：<a href="https://github.com/0xfe/vexflow">https://github.com/0xfe/vexflow</a></p>
<p>mxl乐谱渲染：<a href="https://github.com/opensheetmusicdisplay/opensheetmusicdisplayddemo">https://github.com/opensheetmusicdisplay/opensheetmusicdisplayddemo</a></p>
<p>demo页：<a href="https://opensheetmusicdisplay.org/demos/public-typescript-demo/">https://opensheetmusicdisplay.org/demos/public-typescript-demo/</a></p>
<p>❤️‍🔥基于机器学习的自动作曲：<a href="https://magenta.tensorflow.org/">https://magenta.tensorflow.org/</a></p>
<p><a href="https://magenta.tensorflow.org/demos/web/">https://magenta.tensorflow.org/demos/web/</a></p>
<p><a href="https://github.com/magenta/magenta">https://github.com/magenta/magenta</a></p>
<p>music21 指南：计算音乐学分析python库：<a href="https://github.com/lukewys/Magenta-Modification/blob/master/Music21%E7%AE%80%E6%98%8E%E6%8C%87%E5%8D%97.ipynb"><a href="https://github.com/lukewys/Magenta-Modification/blob/master/Music21%E7%AE%80%E6%98%8E%E6%8C%87%E5%8D%97.ipynb">https://github.com/lukewys/Magenta-Modification/blob/master/Music21简明指南.ipynb</a></a></p>
]]></content>
  </entry>
  <entry>
    <title>如何实现浏览器内容保存为本地文件并持续静默保存最新编辑内容</title>
    <url>/hexo-blog/2023/10/20/%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E6%B5%8F%E8%A7%88%E5%99%A8%E5%86%85%E5%AE%B9%E4%BF%9D%E5%AD%98%E4%B8%BA%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E5%B9%B6%E6%8C%81%E7%BB%AD%E9%9D%99%E9%BB%98%E4%BF%9D%E5%AD%98%E6%9C%80%E6%96%B0%E7%BC%96%E8%BE%91%E5%86%85%E5%AE%B9/</url>
    <content><![CDATA[<h2 id="背景："><a href="#背景：" class="headerlink" title="背景："></a>背景：</h2><p>最近发现drawio的一些功能很黑魔法。<br>比如首次创建一个文件，浏览器系统弹窗保存到本地，（到这为止都是常规保存文件的套路，很好实现）。<br>接下来，你在浏览器中继续绘制编辑你创建的图表，ctrol+S 保存之后，神奇的事情发生了，没有任何系统弹窗，最新的内容已经被静默地写入了首次创建的文件中。</p>
<p>这个行为是有点反直觉的，相当于在无感知的情况下，直接读写系统文件。浏览器一般不会给这么大的权限。</p>
<h2 id="如何实现"><a href="#如何实现" class="headerlink" title="如何实现"></a>如何实现</h2><p>如果有，也只能是浏览器提供的能力，于是，找到了这个 <code>API： FileSystemWritableFileStream</code></p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/API/FileSystemWritableFileStream">https://developer.mozilla.org/en-US/docs/Web/API/FileSystemWritableFileStream</a></p>
<h3 id="兼容性很不好："><a href="#兼容性很不好：" class="headerlink" title="兼容性很不好："></a>兼容性很不好：</h3><p><img src="https://user-images.githubusercontent.com/9689442/178710146-4fc3067c-ed45-410f-855d-baa8d243dd1d.png" alt="image"></p>
<h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><ol>
<li>首次保存创造了一个FileSystemFileHandle对象：newHandle，提供对该读写文件的能力。</li>
<li>更新文件内容的时候，通过FileSystemFileHandle创造一个对该文件写入流 ：writableStream。</li>
<li>使用writableStream.write 写入最新的文本Blob，（注意此处是覆盖式的）。</li>
<li>关闭流</li>
</ol>
<h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>file save<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-id">#addText</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>保存为本地文件并持续实时保存最新编辑的内容<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>text to save:<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">id</span>=<span class="string">&quot;addText&quot;</span> <span class="attr">name</span>=<span class="string">&quot;addText&quot;</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;saveFile()&quot;</span>&gt;</span>1. start save<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;updateFile()&quot;</span>&gt;</span>2. update<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>file contents:<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;fileContent&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// https://developer.mozilla.org/en-US/docs/Web/API/FileSystemWritableFileStream</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> $textToAdd;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> $fileContent;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> newHandle;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> pickerOpts = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">types</span>: [</span></span><br><span class="line"><span class="language-javascript">          &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">description</span>: <span class="string">&quot;Text file&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">accept</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="string">&quot;text/plain&quot;</span>: [<span class="string">&quot;.txt&quot;</span>],</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">        ],</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">suggestedName</span>: <span class="string">&quot;testFile&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">excludeAcceptAllOption</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">multiple</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">saveFile</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// create a new handle</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;showSaveFilePicker&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        newHandle = <span class="keyword">await</span> <span class="variable language_">window</span>.<span class="title function_">showSaveFilePicker</span>(pickerOpts);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;createWritable&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// create a FileSystemWritableFileStream to write to</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> writableStream = <span class="keyword">await</span> newHandle.<span class="title function_">createWritable</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">updateFile</span>();</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getFileContents</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> fileData = <span class="keyword">await</span> newHandle.<span class="title function_">getFile</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> res = <span class="keyword">await</span> fileData.<span class="title function_">text</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;fileText: &quot;</span>, res);</span></span><br><span class="line"><span class="language-javascript">        $fileContent.<span class="property">innerText</span> = res;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">updateFileContent</span>(<span class="params">text</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// create a FileSystemWritableFileStream to write to</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> writableStream = <span class="keyword">await</span> newHandle.<span class="title function_">createWritable</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> data = <span class="keyword">new</span> <span class="title class_">Blob</span>([text], &#123; <span class="attr">type</span>: <span class="string">&quot;text&quot;</span> &#125;);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// write our file</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">await</span> writableStream.<span class="title function_">write</span>(data);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// close the file and write the contents to disk.</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">await</span> writableStream.<span class="title function_">close</span>();</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">updateFile</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> text = $textToAdd.<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">await</span> <span class="title function_">updateFileContent</span>(text);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">await</span> <span class="title function_">getFileContents</span>();</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;DOMContentLoaded&quot;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        $textToAdd = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;addText&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        $fileContent = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;fileContent&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="发散一下：可以利用这个特性进行攻击吗？"><a href="#发散一下：可以利用这个特性进行攻击吗？" class="headerlink" title="发散一下：可以利用这个特性进行攻击吗？"></a>发散一下：可以利用这个特性进行攻击吗？</h3><p>比如前端通过js改写下载文件的内容。</p>
<p>可以继续研究一下这个API有什么安全限制。</p>
<p><a href="https://juejin.cn/post/7086054628294557733">https://juejin.cn/post/7086054628294557733</a></p>
]]></content>
  </entry>
  <entry>
    <title>技术充电React18</title>
    <url>/hexo-blog/2023/10/13/%E6%8A%80%E6%9C%AF%E5%85%85%E7%94%B5React18/</url>
    <content><![CDATA[<h2 id="React18"><a href="#React18" class="headerlink" title="React18"></a>React18</h2><p><a href="https://juejin.cn/post/7078511027091931167">React 18 超全升级指南</a></p>
<ul>
<li>ReactDOM.render替换为createRoot，影响范围：第三方组件库。</li>
<li>setState的同步异步breakChange</li>
<li>useSyncExternalStore：订阅外部数据 &amp; 解决tear问题</li>
<li>想深入理解的话：<a href="https://www.zhihu.com/question/502917860">https://www.zhihu.com/question/502917860</a></li>
<li>什么是tear（撕裂）：<a href="https://github.com/reactwg/react-18/discussions/69%EF%BC%8C">https://github.com/reactwg/react-18/discussions/69，</a></li>
<li>简言之：在fiber的分块更新时域不连续性前提下，并发存在多源修改数据的可能性，等你第二次接着渲染的时候，数据可能被人改了，同一render内两块渲染的数据不一致。</li>
</ul>
<p><a href="https://zhuanlan.zhihu.com/p/486902510">如何升级到react18</a></p>
<ul>
<li>关于strictMode的变化</li>
<li>不再支持IE</li>
</ul>
<p>配合<a href="https://www.youtube.com/watch?v=8dUpL8SCO1w">React Conf 2021</a>食用<br><a href="https://github.com/reactwg/react-18/discussions/70">Concurrent React for Library Maintainers</a></p>
<p>hooks：</p>
<ul>
<li><a href="https://cooperhu.com/2020/09/03/useEffect-componentDidMount/">useEffect 与componentDidMount的差异</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/348701319">useEfffect与useLayoutEffect的差异</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/275776067">React Concurrent Mode三连：是什么&#x2F;为什么&#x2F;怎么做</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/425009300">React 18 Concurrent 之 useDeferredValue &lt;译&gt;</a></li>
</ul>
<h2 id="文章-amp-工具"><a href="#文章-amp-工具" class="headerlink" title="文章&amp;工具"></a>文章&amp;工具</h2><ul>
<li>手势库 <a href="https://use-gesture.netlify.app/%EF%BC%8C%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%8B%96%E6%8B%BD%E6%BB%9A%E5%8A%A8%E7%AD%89%E7%9A%84%E6%89%8B%E5%8A%BF%E7%9A%84hook%E5%BA%93%EF%BC%8C%E6%9B%B4%E6%96%B0%E9%A2%91%E7%B9%81%E6%96%87%E6%A1%A3demo%E5%AE%8C%E5%96%84%E3%80%82">https://use-gesture.netlify.app/，移动端拖拽滚动等的手势的hook库，更新频繁文档demo完善。</a></li>
<li>常用hook库，<a href="https://ahooks.js.org/zh-CN%EF%BC%8C%E6%9C%89%E9%9D%9E%E5%B8%B8%E5%A4%9A%E8%AE%BE%E8%AE%A1%E4%BC%98%E7%A7%80%E7%9A%84hook%EF%BC%8C%E5%8F%AF%E4%BB%A5%E7%9C%8B%E6%BA%90%E7%A0%81%E5%AE%9E%E7%8E%B0%E6%80%9D%E8%B7%AF">https://ahooks.js.org/zh-CN，有非常多设计优秀的hook，可以看源码实现思路</a> or 自己练习实现一下。配套的blog文档含金量也很高，例如：<a href="https://github.com/alibaba/hooks/blob/master/docs/guide/blog/function.zh-CN.md">ahooks 函数处理规范（函数引用不变的原理）</a></li>
<li>react测试库，目前支持react 18还在WIP<ul>
<li>组件，<a href="https://github.com/testing-library/react-testing-library">https://github.com/testing-library/react-testing-library</a></li>
<li>hook，<a href="https://github.com/testing-library/react-hooks-testing-library">https://github.com/testing-library/react-hooks-testing-library</a></li>
</ul>
</li>
<li><a href="https://github.com/d2forum/16th">去年D2的ppt资料</a></li>
</ul>
<h2 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h2><p>从新的hook可以窥探到，react的发展越来越不像一个 UI 库了，有了更复杂&amp;难以理解的设计理念，甚至明明白白的告诉你：“哪些特性普通开发者不用关心，只需要使用react给你的一般API就可以，复杂的事情我们我们已经帮你处理好了”。</p>
<p>React的用户被分层了。一部分普通用户学会 how to use， 一部分库开发者要学会 why and how to make it right and fast。</p>
<p>不变的是react那个核心的设计思想（仅本人感受到的）：用技术抹平人的差异性，让更多的人可以低成本的 产出 高性能的结果。这或许是一种研发的工业化？</p>
<p>工人分化为：点点点机器的工人和研发机器的工人。</p>
]]></content>
  </entry>
  <entry>
    <title>直播弹幕互动游戏</title>
    <url>/hexo-blog/2023/10/25/%E7%9B%B4%E6%92%AD%E5%BC%B9%E5%B9%95%E4%BA%92%E5%8A%A8%E6%B8%B8%E6%88%8F/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>弹幕互动游戏 是近年来在游戏（误：直播）行业中越来越受到欢迎的游戏形式。这种游戏通过收集玩家的弹幕信息，将其实时显示在游戏画面中，增加了互动性和趣味性，在抖音、B站等直播平台，目前已经有很多高人气的弹幕互动类游戏。其中既有第三方开发的也有平台自身研发的。</p>
<p><img src="https://user-images.githubusercontent.com/9689442/221814516-5acdd0aa-a5dc-4c98-b619-2bbb502834f5.png" alt="image"></p>
<hr>
<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><p>弹幕互动游戏最大的特点就是弹幕互动。传统的游戏模式往往是单向的，玩家只是被动地接受游戏的内容。而弹幕互动游戏则不同，玩家可以在游戏中发射弹幕，通过与其他玩家互动，增加了游戏的趣味性和互动性。此外，弹幕互动游戏还具有以下特点：多样化的游戏模式、实时互动的体验、全球玩家的互动等。</p>
<hr>
<h3 id="游戏模式多样化："><a href="#游戏模式多样化：" class="headerlink" title="游戏模式多样化："></a>游戏模式多样化：</h3><ol>
<li>玩家阵营对抗，用户通过弹幕选择阵营，生成AI小兵做阵营对抗，点赞 or 消费不同金额的礼物可以获取额外的优势（氪金外挂），帮助己方阵营获胜。eg.抖音《森林派对》</li>
</ol>
<p><img src="https://user-images.githubusercontent.com/9689442/221814630-ae187097-50f8-4a25-8a9a-28a32fbe2a68.png" alt="image"></p>
<ol start="2">
<li>玩家与主播同阵营，对抗第三方：AI角色&#x2F;障碍，</li>
<li>玩家对抗主播：玩家通过弹幕生产AI角色&#x2F;障碍来阻碍主播获得胜利。eg。《是兄弟就来砍我》</li>
</ol>
<p><img src="https://user-images.githubusercontent.com/9689442/221814931-ac1da372-d599-4000-b604-169e2a149383.png" alt="image"></p>
<ol start="4">
<li>主播间的对抗，结合2、3玩法，玩家可以选择帮助自己支持的直播间，给同阵营主播提供帮助，给对方阵营主播使绊子，以达到己方获胜的目的。如果说1、2、3更多像一个单机游戏，那么4更像一个网游。</li>
<li>主播授权给观众操作传统游戏角色的权利，有点儿偏向于社会学实验的性质，操作难度极高，最早是在国外游戏直播平台twitch上出现，代表案例：累计有超过百万名观众通过弹幕参与通关神奇宝贝，后来国内主播也有效仿之作，比如B站的万人原神：</li>
</ol>
<p><a href="https://www.bilibili.com/video/BV1xQ4y1Q7CU/?vd_source=13a87a9b97c2b7b5b32c8f91714ede90">https://www.bilibili.com/video/BV1xQ4y1Q7CU/?vd_source=13a87a9b97c2b7b5b32c8f91714ede90</a></p>
<hr>
<h3 id="实时又不“实时”"><a href="#实时又不“实时”" class="headerlink" title="实时又不“实时”"></a>实时又不“实时”</h3><hr>
<p>传统游戏直播模式，</p>
<p>以玩家作为信息的接收方为主，部分主播会制定自己的私人规则，来提升玩家的参与度，比如：</p>
<ol>
<li>礼物贡献高的玩家可以直接参与游戏（多人网游场景</li>
</ol>
<p><img src="https://user-images.githubusercontent.com/9689442/221815082-04303610-75e7-4444-ad08-6f1f0d393fe5.png" alt="image"></p>
<ol start="2">
<li>主播阅读弹幕互动，“谢谢xxx送的xxxx” 🔥</li>
</ol>
<hr>
<p>互动弹幕游戏模式</p>
<p>虽然弹幕互动游戏声称自己是实时的，但是直播弹幕互动实际上是高延迟的一个操作。具体体现在几个阶段：</p>
<ol>
<li>用户收到主播游戏画面的延迟</li>
<li>主播延迟收到用户弹幕</li>
<li>弹幕作用于游戏的效果再通过直播流延迟播放给用户</li>
</ol>
<p>用户完成一次弹幕交互，至少需要3次通信，而且是远远滞后的。</p>
<p><img src="https://www.plantuml.com/plantuml/png/SoWkIImgAStDuKeiBSdFAyrDIYtYUh9ZzxD9QnLqxHIUpUbzshNmwSmL2bOAptRiUDRH_tpAxfTp5t719K2gdazPyQnZExeIY2YAALOAJ_ViVBfpAgfsY7LmEGWNK-9PJ_kJtKkUTIv_iR3d_PwUPxEtF9ks0Tb6AhcRoo4rBmKO8W00" alt="image"></p>
<p>这就限制了弹幕互动游戏的种类，高实时操作性的游戏，在弹幕互动场景下变成了hard模式，这个一会我们可以体验一下。</p>
<hr>
<h1 id="我们来试着整一个直播弹幕互动游戏玩一下"><a href="#我们来试着整一个直播弹幕互动游戏玩一下" class="headerlink" title="我们来试着整一个直播弹幕互动游戏玩一下"></a>我们来试着整一个直播弹幕互动游戏玩一下</h1><p>几个要素</p>
<ul>
<li>直播</li>
<li>弹幕</li>
<li>游戏</li>
<li>弹幕和游戏的连接</li>
</ul>
<p>我们以B站为例</p>
<hr>
<h2 id="直播"><a href="#直播" class="headerlink" title="直播"></a>直播</h2><hr>
<h3 id="使用b站的官方直播软件：（目前不兼容非M1的mac）"><a href="#使用b站的官方直播软件：（目前不兼容非M1的mac）" class="headerlink" title="使用b站的官方直播软件：（目前不兼容非M1的mac）"></a>使用b站的官方直播软件：（目前不兼容非M1的mac）</h3><p><a href="https://live.bilibili.com/liveHime?source=activity"><a href="https://live.bilibili.com/liveHime?source=activity">哔哩哔哩直播姬下载</a></a></p>
<p>实际上，B站自己的直播端在直播游戏这个场景不太好用，亲测同设备的情况下，为满足直播+游戏性能，清晰度很低画质很烂。</p>
<hr>
<h3 id="OBS-第三方插件-b站直播服务器地址和推流码"><a href="#OBS-第三方插件-b站直播服务器地址和推流码" class="headerlink" title="OBS+第三方插件 + b站直播服务器地址和推流码"></a>OBS+第三方插件 + b站直播服务器地址和推流码</h3><p>在B站开启直播间后，可以在个人中心：我的直播间，看到服务器地址和推流码</p>
<p><img src="https://user-images.githubusercontent.com/9689442/221815478-7e59758a-36d9-44da-8f1c-9f29fae29821.png" alt="image"></p>
<p>在obs的直播设置中填写服务器地址和推流码</p>
<p><img src="https://user-images.githubusercontent.com/9689442/221815898-99a49e28-893d-4b62-af06-98d581aba5bd.png" alt="Untitled"></p>
<p>OBS 提供了捕捉</p>
<ul>
<li>窗口</li>
<li>网页</li>
<li>屏幕</li>
<li>…</li>
</ul>
<p>等能力，所以我们可以采取的方案可以有</p>
<ul>
<li>自己开发一个网页，在网页中订阅弹幕+控制游戏，OBS捕捉该网页</li>
<li>自己开发一个弹幕订阅+ 执行native方法的软件， native游戏【客户端同学可以尝试一下</li>
</ul>
<p>下面分别说一下弹幕和游戏的part</p>
<h2 id="弹幕"><a href="#弹幕" class="headerlink" title="弹幕"></a>弹幕</h2><hr>
<p>b站开放了主播直播端的插件开发开放平台</p>
<p><a href="https://open-live.bilibili.com/"><a href="https://open-live.bilibili.com/">哔哩哔哩直播开放平台</a></a></p>
<p>开发者可以</p>
<ol>
<li>申请开发密钥</li>
<li>开发互动应用</li>
<li>上架B站的商城</li>
</ol>
<p><a href="https://play-live.bilibili.com/"><a href="https://play-live.bilibili.com/">哔哩哔哩饭贩</a></a></p>
<hr>
<p>有了密钥之后</p>
<h3 id="获取直播间弹幕数据"><a href="#获取直播间弹幕数据" class="headerlink" title="获取直播间弹幕数据"></a>获取直播间弹幕数据</h3><p><img src="https://user-images.githubusercontent.com/9689442/221816031-b4c5f4fc-025a-44fb-94e7-42bacdd012da.png" alt="image"></p>
<p>B站给开发这提供了获取直播间数据的流程和demo代码。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> websockets</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> hmac</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">import</span> proto</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BiliClient</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, roomId, key, secret, host = <span class="string">&#x27;live-open.biliapi.com&#x27;</span></span>):</span><br><span class="line">        self.roomId = roomId</span><br><span class="line">        self.key = key</span><br><span class="line">        self.secret = secret</span><br><span class="line">        self.host = host</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 事件循环</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        loop = asyncio.get_event_loop()</span><br><span class="line">        websocket = loop.run_until_complete(self.connect())</span><br><span class="line">        tasks = [</span><br><span class="line">            asyncio.ensure_future(self.recvLoop(websocket)),</span><br><span class="line">            asyncio.ensure_future(self.heartBeat(websocket)), </span><br><span class="line">        ]</span><br><span class="line">        loop.run_until_complete(asyncio.gather(*tasks))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># http的签名</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sign</span>(<span class="params">self, params</span>):</span><br><span class="line">        key = self.key</span><br><span class="line">        secret = self.secret</span><br><span class="line">        md5 = hashlib.md5()</span><br><span class="line">        md5.update(params.encode())</span><br><span class="line">        ts = time.time()</span><br><span class="line">        nonce = random.randint(<span class="number">1</span>,<span class="number">100000</span>)+time.time()</span><br><span class="line">        md5data = md5.hexdigest()</span><br><span class="line">        headerMap = &#123;</span><br><span class="line">        <span class="string">&quot;x-bili-timestamp&quot;</span>: <span class="built_in">str</span>(<span class="built_in">int</span>(ts)),</span><br><span class="line">        <span class="string">&quot;x-bili-signature-method&quot;</span>: <span class="string">&quot;HMAC-SHA256&quot;</span>,</span><br><span class="line">        <span class="string">&quot;x-bili-signature-nonce&quot;</span>: <span class="built_in">str</span>(nonce),</span><br><span class="line">        <span class="string">&quot;x-bili-accesskeyid&quot;</span>: key,</span><br><span class="line">        <span class="string">&quot;x-bili-signature-version&quot;</span>: <span class="string">&quot;1.0&quot;</span>,</span><br><span class="line">        <span class="string">&quot;x-bili-content-md5&quot;</span>: md5data,</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        headerList = <span class="built_in">sorted</span>(headerMap)</span><br><span class="line">        headerStr = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> key <span class="keyword">in</span> headerList:</span><br><span class="line">            headerStr = headerStr+ key+<span class="string">&quot;:&quot;</span>+<span class="built_in">str</span>(headerMap[key])+<span class="string">&quot;\n&quot;</span></span><br><span class="line">        headerStr = headerStr.rstrip(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">        appsecret = secret.encode() </span><br><span class="line">        data = headerStr.encode()</span><br><span class="line">        signature = hmac.new(appsecret, data, digestmod=sha256).hexdigest()</span><br><span class="line">        headerMap[<span class="string">&quot;Authorization&quot;</span>] = signature</span><br><span class="line">        headerMap[<span class="string">&quot;Content-Type&quot;</span>] = <span class="string">&quot;application/json&quot;</span></span><br><span class="line">        headerMap[<span class="string">&quot;Accept&quot;</span>] = <span class="string">&quot;application/json&quot;</span></span><br><span class="line">        <span class="keyword">return</span> headerMap</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取长链信息</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">websocketInfoReq</span>(<span class="params">self, postUrl, params</span>):</span><br><span class="line">        headerMap = self.sign(params)</span><br><span class="line">        r = requests.post(url=postUrl, headers=headerMap, data=params, verify=<span class="literal">False</span>)</span><br><span class="line">        data = json.loads(r.content)</span><br><span class="line">        <span class="built_in">print</span>(data)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ws://&quot;</span> + data[<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;host&#x27;</span>][<span class="number">0</span>]+<span class="string">&quot;:&quot;</span>+<span class="built_in">str</span>(data[<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;ws_port&#x27;</span>][<span class="number">0</span>])+<span class="string">&quot;/sub&quot;</span>, data[<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;auth_body&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 长链的auth包</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">auth</span>(<span class="params">self, websocket, authBody</span>):</span><br><span class="line">        req = proto.Proto()</span><br><span class="line">        req.body = authBody</span><br><span class="line">        req.op = <span class="number">7</span></span><br><span class="line">        <span class="keyword">await</span> websocket.send(req.pack())</span><br><span class="line">        buf = <span class="keyword">await</span> websocket.recv()</span><br><span class="line">        resp = proto.Proto()</span><br><span class="line">        resp.unpack(buf)</span><br><span class="line">        respBody = json.loads(resp.body)</span><br><span class="line">        <span class="keyword">if</span> respBody[<span class="string">&quot;code&quot;</span>] != <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;auth 失败&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;auth 成功&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 长链的心跳包</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">heartBeat</span>(<span class="params">self, websocket</span>):</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">await</span> asyncio.ensure_future(asyncio.sleep(<span class="number">20</span>))</span><br><span class="line">            req = proto.Proto()</span><br><span class="line">            req.op = <span class="number">2</span></span><br><span class="line">            <span class="keyword">await</span> websocket.send(req.pack())</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;[BiliClient] send heartBeat success&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 长链的接受循环</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">recvLoop</span>(<span class="params">self, websocket</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[BiliClient] run recv...&quot;</span>)</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            recvBuf = <span class="keyword">await</span> websocket.recv()</span><br><span class="line">            resp = proto.Proto()</span><br><span class="line">            resp.unpack(recvBuf)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">connect</span>(<span class="params">self</span>):</span><br><span class="line">        postUrl = <span class="string">&quot;https://%s/v1/common/websocketInfo&quot;</span>%self.host</span><br><span class="line">        params = <span class="string">&#x27;&#123;&quot;room_id&quot;:%s&#125;&#x27;</span>%self.roomId</span><br><span class="line">        addr, authBody = self.websocketInfoReq(postUrl, params)</span><br><span class="line">        <span class="built_in">print</span>(addr, authBody)</span><br><span class="line">        websocket = <span class="keyword">await</span> websockets.connect(addr)</span><br><span class="line">        <span class="keyword">await</span> self.auth(websocket, authBody)</span><br><span class="line">        <span class="keyword">return</span> websocket</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        cli = BiliClient(</span><br><span class="line">            roomId = <span class="number">23105976</span>,</span><br><span class="line">            key = <span class="string">&quot;&quot;</span>,</span><br><span class="line">            secret = <span class="string">&quot;&quot;</span>,</span><br><span class="line">            host = <span class="string">&quot;live-open.biliapi.com&quot;</span>)</span><br><span class="line">        cli.run()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;err&quot;</span>, e)</span><br></pre></td></tr></table></figure>

<p>参考这个流程那么互动弹幕的核心逻辑就是：</p>
<ol>
<li>获取ws地址端口</li>
<li>建立ws链接</li>
<li>收发数据</li>
<li>解析出弹幕</li>
<li>执行游戏指令&#x2F;操作</li>
</ol>
<hr>
<p>我们可以看一下效果</p>
<p><img src="https://user-images.githubusercontent.com/9689442/221816900-c00ef2a9-4bd9-4342-a9a9-f0d43ce993a2.png" alt="image"></p>
<p>这里演示的是开源项目<a href="https://github.com/xfgryujk/blivechat%E7%9A%84%E6%9C%AC%E5%9C%B0python%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%8C%E8%BF%99%E9%87%8C%E5%B0%B1%E6%98%AF%E5%AE%9E%E7%8E%B0%E4%BA%86%E4%B8%8A%E8%BF%B0%E6%B5%81%E7%A8%8B%EF%BC%88mock%E7%89%88%E6%9C%AC%EF%BC%89">https://github.com/xfgryujk/blivechat的本地python服务器，这里就是实现了上述流程（mock版本）</a></p>
<p>如果我们把room ID换成B站线上正在开播的直播间ID，同样可以抓到弹幕信息。</p>
<p>好，弹幕我们已经搞到了，下一步，选择游戏</p>
<h2 id="游戏"><a href="#游戏" class="headerlink" title="游戏"></a>游戏</h2><p>这里为了对比出效果，我选择了两类游戏， 实时操作类 和非实时解谜类，代表作</p>
<ul>
<li>红白机：<a href="https://www.playfc.cn/">https://www.playfc.cn/</a><ul>
<li>激龟快打</li>
<li>超级玛丽</li>
</ul>
</li>
<li>扫雷:<a href="https://zhongyangxun.github.io/mine-sweeper/build/">https://zhongyangxun.github.io/mine-sweeper/build/</a></li>
</ul>
<hr>
<h3 id="网页版红白机游戏"><a href="#网页版红白机游戏" class="headerlink" title="网页版红白机游戏"></a>网页版红白机游戏</h3><p>网页版红白机游戏的基本原理</p>
<ul>
<li>JavaScript NES 模拟器</li>
<li>加载 .nes 文件</li>
<li>注册事件监听</li>
<li>循环frameTicker<ul>
<li>使用canvas渲染每一帧</li>
<li>audioContext播放音频采样</li>
</ul>
</li>
</ul>
<hr>
<p>我们以模拟器<a href="https://github.com/bfirsh/jsnes">https://github.com/bfirsh/jsnes</a> 为例</p>
<p>核心使用代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 实例化NES模拟器</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">nes</span> = <span class="keyword">new</span> <span class="title function_">NES</span>(&#123;</span><br><span class="line">      <span class="attr">onFrame</span>: <span class="variable language_">this</span>.<span class="property">screen</span>.<span class="property">setBuffer</span>,  <span class="comment">// canvas</span></span><br><span class="line">      <span class="attr">onStatusUpdate</span>: <span class="variable language_">console</span>.<span class="property">log</span>,</span><br><span class="line">      <span class="attr">onAudioSample</span>: <span class="variable language_">this</span>.<span class="property">speakers</span>.<span class="property">writeSample</span>, <span class="comment">// 音频</span></span><br><span class="line">      <span class="attr">sampleRate</span>: <span class="variable language_">this</span>.<span class="property">speakers</span>.<span class="title function_">getSampleRate</span>()</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 事件</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">gamepadController</span> = <span class="keyword">new</span> <span class="title class_">GamepadController</span>(&#123;</span><br><span class="line">      <span class="attr">onButtonDown</span>: <span class="variable language_">this</span>.<span class="property">nes</span>.<span class="property">buttonDown</span>,</span><br><span class="line">      <span class="attr">onButtonUp</span>: <span class="variable language_">this</span>.<span class="property">nes</span>.<span class="property">buttonUp</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">keyboardController</span> = <span class="keyword">new</span> <span class="title class_">KeyboardController</span>(&#123;</span><br><span class="line">      <span class="attr">onButtonDown</span>: <span class="variable language_">this</span>.<span class="property">gamepadController</span>.<span class="title function_">disableIfGamepadEnabled</span>(</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">nes</span>.<span class="property">buttonDown</span></span><br><span class="line">      ),</span><br><span class="line">      <span class="attr">onButtonUp</span>: <span class="variable language_">this</span>.<span class="property">gamepadController</span>.<span class="title function_">disableIfGamepadEnabled</span>(</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">nes</span>.<span class="property">buttonUp</span></span><br><span class="line">      )</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Load keys from localStorage (if they exist)</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">keyboardController</span>.<span class="title function_">loadKeys</span>();</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;keydown&quot;</span>, <span class="variable language_">this</span>.<span class="property">keyboardController</span>.<span class="property">handleKeyDown</span>);</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;keyup&quot;</span>, <span class="variable language_">this</span>.<span class="property">keyboardController</span>.<span class="property">handleKeyUp</span>);</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(</span><br><span class="line">  <span class="string">&quot;keypress&quot;</span>,</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">keyboardController</span>.<span class="property">handleKeyPress</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载.nes：ROM</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">nes</span>.<span class="title function_">loadROM</span>(<span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">romData</span>);</span><br></pre></td></tr></table></figure>

<p>其Web UI</p>
<p><img src="https://user-images.githubusercontent.com/9689442/221817388-4bb2757b-bc64-412e-a102-af516f0f0fee.png" alt="image"></p>
<p>好我们目前至少跑起来了一个游戏了，下一步</p>
<hr>
<h2 id="如何把游戏跟弹幕连接起来"><a href="#如何把游戏跟弹幕连接起来" class="headerlink" title="如何把游戏跟弹幕连接起来"></a>如何把游戏跟弹幕连接起来</h2><p>一个思路：解析弹幕执行游戏指令</p>
<p>红白机游戏的游戏内只有6个控制键</p>
<ul>
<li>up</li>
<li>down</li>
<li>left</li>
<li>right</li>
<li>A</li>
<li>B</li>
</ul>
<p>游戏外当然还有start\pause等（暂时先不管</p>
<p>在js的NES 模拟器中，这些控制键被映射成为了键盘的的按键</p>
<p><img src="https://user-images.githubusercontent.com/9689442/221817478-58daf078-a031-4d80-b054-6feb39e85e26.png" alt="image"></p>
<p>我们要做的就是</p>
<ul>
<li>收到用户’wasd’弹幕</li>
<li>解析出来每个字符</li>
<li>模拟触发浏览器的键盘事件</li>
<li>控制游戏</li>
</ul>
<hr>
<h3 id="遇到了第一个问题："><a href="#遇到了第一个问题：" class="headerlink" title="遇到了第一个问题："></a>遇到了第一个问题：</h3><p>为了方便插拔游戏，我把游戏加载在iframe中，遇到了iframe跨域问题，无法获取iframe的内容窗口并派发键盘事件，这个解决方案非常常见就是使用postMessage</p>
<p>在弹幕订阅页：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="variable constant_">KEY_MAP</span> <span class="keyword">from</span> <span class="string">&#x27;../keyboard&#x27;</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 忍者神龟4等NES游戏</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">delay</span> = sec =&gt; <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">setTimeout</span>(resolve, sec))</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">TurtleTrigger</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">reg</span> = <span class="regexp">/([A-Za-z0-9])/g</span></span><br><span class="line">		<span class="comment">// iframe</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">dom</span> = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;iframeContain&#x27;</span>).<span class="property">contentWindow</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">processing</span> = <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 发送模拟键盘事件给iframe</span></span><br><span class="line">  _run = <span class="keyword">async</span> key =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> evtOpt = <span class="variable constant_">KEY_MAP</span>[key.<span class="title function_">toUpperCase</span>()]</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">dom</span>.<span class="title function_">postMessage</span>(&#123; <span class="attr">key</span>: <span class="string">&#x27;keydown&#x27;</span>, <span class="attr">opt</span>: evtOpt &#125;, <span class="string">&quot;*&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">dom</span>.<span class="title function_">postMessage</span>(&#123; <span class="attr">key</span>: <span class="string">&#x27;keyup&#x27;</span>, <span class="attr">opt</span>: evtOpt &#125;, <span class="string">&quot;*&quot;</span>)</span><br><span class="line">        <span class="title function_">resolve</span>()</span><br><span class="line">      &#125;, <span class="number">100</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 弹幕处理函数 </span></span><br><span class="line">  process = <span class="keyword">async</span> danmu =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">processing</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;trigger proccessing&#x27;</span>)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">processing</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 正则把字母提取出来 </span></span><br><span class="line">    <span class="keyword">const</span> matched = danmu.<span class="title function_">match</span>(<span class="variable language_">this</span>.<span class="property">reg</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;matched&#x27;</span>, matched)</span><br><span class="line">    <span class="keyword">if</span> (!matched) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">processing</span> = <span class="literal">false</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// console.log(&#x27;run matched&#x27;, matched)</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 逐一执行</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> value <span class="keyword">of</span> matched) &#123;</span><br><span class="line">      <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">_run</span>(value)</span><br><span class="line">      <span class="keyword">await</span> <span class="title function_">delay</span>(<span class="number">30</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">processing</span> = <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在NES游戏页面</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;message&#x27;</span>, <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;msg=====&#x27;</span>,e.<span class="property">data</span>)</span><br><span class="line">      <span class="keyword">const</span> &#123; key ,opt&#125; = e.<span class="property">data</span></span><br><span class="line">      <span class="keyword">const</span> evt = <span class="keyword">new</span> <span class="title class_">KeyboardEvent</span>(key, opt)</span><br><span class="line">      <span class="variable language_">document</span>.<span class="title function_">dispatchEvent</span>(evt)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="超级玛丽"><a href="#超级玛丽" class="headerlink" title="超级玛丽"></a>超级玛丽</h3><p>这个游戏遇到了一个问题，超级玛丽中，长按和短按事有不同效果的</p>
<ul>
<li>短按jump，跳得矮</li>
<li>长按jump：跳得高</li>
<li>短按方向键：短暂拥有一下下加速度</li>
<li>长按方向键：一直加速到最高</li>
</ul>
<p>而游戏中关卡被设计得是必须长按才能过去的，因此这里处理弹幕到时候，得实现长按效果</p>
<p><img src="https://user-images.githubusercontent.com/9689442/221817994-be48481e-2720-454d-a01f-2538df950da7.png" alt="image"></p>
<p>思路：</p>
<p>合并相同key，延长按压时间</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 发送模拟键盘事件给iframe</span></span><br><span class="line">_run = <span class="title function_">async</span>(key, duration = <span class="number">1</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> evtOpt = <span class="variable constant_">KEY_MAP</span>[key.<span class="title function_">toUpperCase</span>()]</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">dom</span>.<span class="title function_">postMessage</span>(&#123; <span class="attr">key</span>: <span class="string">&#x27;keydown&#x27;</span>, <span class="attr">opt</span>: evtOpt &#125;, <span class="string">&quot;*&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">dom</span>.<span class="title function_">postMessage</span>(&#123; <span class="attr">key</span>: <span class="string">&#x27;keyup&#x27;</span>, <span class="attr">opt</span>: evtOpt &#125;, <span class="string">&quot;*&quot;</span>)</span><br><span class="line">        <span class="title function_">resolve</span>()</span><br><span class="line">			<span class="comment">// 可调节按压时长</span></span><br><span class="line">      &#125;, duration * <span class="number">100</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 合并相同按键</span></span><br><span class="line">  <span class="title function_">sumSame</span>(<span class="params">chars</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> bucket = []</span><br><span class="line">    <span class="keyword">let</span> temp = &#123;</span><br><span class="line">      <span class="attr">key</span>: chars[<span class="number">0</span>],</span><br><span class="line">      <span class="attr">count</span>: <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt;= chars.<span class="property">length</span> - <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (temp.<span class="property">key</span> === chars[i]) &#123;</span><br><span class="line">        temp.<span class="property">count</span>++</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        bucket.<span class="title function_">push</span>(temp)</span><br><span class="line">        temp = &#123;</span><br><span class="line">          <span class="attr">key</span>: chars[i],</span><br><span class="line">          <span class="attr">count</span>: <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      i++</span><br><span class="line">    &#125;</span><br><span class="line">    bucket.<span class="title function_">push</span>(temp)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(bucket)</span><br><span class="line">    <span class="keyword">return</span> bucket</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">process = <span class="keyword">async</span> danmu =&gt; &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">mergeSameKey</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> sum = <span class="variable language_">this</span>.<span class="title function_">sumSame</span>(matched)</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">const</span> value <span class="keyword">of</span> sum) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(value)</span><br><span class="line">        <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">_run</span>(value.<span class="property">key</span>, value.<span class="property">count</span>)</span><br><span class="line">        <span class="keyword">await</span> <span class="title function_">delay</span>(<span class="number">30</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">		<span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<hr>
<h2 id="扫雷"><a href="#扫雷" class="headerlink" title="扫雷"></a>扫雷</h2><p>模式是类似的</p>
<ul>
<li>ws订阅</li>
<li>弹幕提取</li>
<li>发消息给游戏窗口</li>
</ul>
<p>不同的点在于</p>
<p><img src="https://user-images.githubusercontent.com/9689442/221818330-73cd5c23-2ac4-4ed1-a910-01d10463cbf4.png" alt="image"></p>
<p>扫雷的操作方式：</p>
<ul>
<li>左键点击坐标：翻开</li>
<li>右键点击格子：插旗</li>
</ul>
<p>这里如果转化为弹幕操作我们需要提取三个数据</p>
<ul>
<li>操作类型： left   or  right</li>
<li>x坐标</li>
<li>y坐标</li>
</ul>
<p>首先设定弹幕格式为4部分，</p>
<ul>
<li>首字符L或者R，表示操作类型</li>
<li>数字表示x坐标</li>
<li>空格，用来分割两个数字</li>
<li>数字表示y坐标</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">L0 0</span><br><span class="line">R0 1</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>那么整体的代码流程就很清晰了</p>
<hr>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>弹幕订阅器</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 扫雷</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">SweeperTrigger</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">reg</span> = <span class="regexp">/^([lLRr])([0-9]+)\s([0-9]+)/</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">dom</span> = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;iframeContain&#x27;</span>).<span class="property">contentWindow</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">processing</span> = <span class="literal">false</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">mergeSameKey</span> = (props &amp;&amp; props.<span class="property">mergeSameKey</span>) || <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  _run = <span class="title function_">async</span>(key, x, y) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;_run&#x27;</span>, key, x, y)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">dom</span>.<span class="title function_">postMessage</span>(&#123; <span class="attr">key</span>: key, <span class="attr">opt</span>: [x, y] &#125;, <span class="string">&quot;*&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  process = <span class="keyword">async</span> danmu =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">processing</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;trigger proccessing&#x27;</span>)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">processing</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> matched = <span class="variable language_">this</span>.<span class="property">reg</span>.<span class="title function_">exec</span>(danmu)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;matched&#x27;</span>, danmu, matched)</span><br><span class="line">    <span class="comment">// 非法过滤</span></span><br><span class="line">    <span class="keyword">if</span> (!matched</span><br><span class="line">      || matched.<span class="property">length</span> !== <span class="number">4</span></span><br><span class="line">      || ![<span class="string">&#x27;L&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;r&#x27;</span>].<span class="title function_">includes</span>(matched[<span class="number">1</span>])</span><br><span class="line">      || <span class="built_in">isNaN</span>(<span class="built_in">parseInt</span>(matched[<span class="number">2</span>]))</span><br><span class="line">      || <span class="built_in">isNaN</span>(<span class="built_in">parseInt</span>(matched[<span class="number">3</span>]))) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;非法指令&#x27;</span>)</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">processing</span> = <span class="literal">false</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">_run</span>(matched[<span class="number">1</span>].<span class="title function_">toUpperCase</span>(), <span class="built_in">parseInt</span>(matched[<span class="number">2</span>]), <span class="built_in">parseInt</span>(matched[<span class="number">3</span>]))</span><br><span class="line">  </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">processing</span> = <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>游戏页</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;message&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; key, opt &#125; = e.<span class="property">data</span></span><br><span class="line">      <span class="keyword">if</span> (![<span class="string">&#x27;L&#x27;</span>, <span class="string">&#x27;R&#x27;</span>].<span class="title function_">includes</span>(key)) <span class="keyword">return</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;msg=====&#x27;</span>, e.<span class="property">data</span>)</span><br><span class="line">      <span class="comment">// 边界检测</span></span><br><span class="line">      <span class="keyword">if</span> (opt[<span class="number">0</span>] &lt; <span class="number">0</span> || opt[<span class="number">0</span>] &gt; <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">rowNum</span> || opt[<span class="number">1</span>] &lt; <span class="number">0</span> || opt[<span class="number">1</span>] &gt; <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">rowNum</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 左键右键</span></span><br><span class="line">      <span class="keyword">if</span> (key === <span class="string">&#x27;L&#x27;</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">handleSquareClick</span>(opt[<span class="number">1</span>], opt[<span class="number">0</span>])</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">handleSquareContextMenu</span>(opt[<span class="number">1</span>], opt[<span class="number">0</span>])</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="总结-amp-展望"><a href="#总结-amp-展望" class="headerlink" title="总结&amp;展望"></a>总结&amp;展望</h2><p>web的互动游戏可以分为三层结构</p>
<ul>
<li>订阅层：处理ws等链接</li>
<li>Trigger 层： 根据每个游戏设定的规则来处理弹幕转化为游戏指令</li>
<li>游戏层：接受指令，执行操作，渲染游戏</li>
</ul>
<p>未来发展中，可以探索的几个方向</p>
<ul>
<li>抽离专门的Trigger编辑器，支持自定义规则</li>
<li>开发Native Trigger，接入单机游戏尝试</li>
<li>针对直播弹幕场景专门设计游戏：既有的游戏无法很好的适配弹幕互动长江，导致很多体验是有问题的</li>
<li>互动游戏的平衡性设计<ul>
<li>多人参与感，而不是头部用户</li>
<li>避免金钱至上，保证直播间流量</li>
</ul>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>警告：Warning: Failed prop type: Invalid prop `monitors` of type `OrderedMap` supplied to `MonitorList`, expected instance of `OrderedMap`.</title>
    <url>/hexo-blog/2023/10/08/%E8%AD%A6%E5%91%8A%EF%BC%9AWarning-Failed-prop-type-Invalid-prop-monitors-of-type-OrderedMap-supplied-to-MonitorList-expected-instance-of-OrderedMap/</url>
    <content><![CDATA[<p>最近在搞scratch-gui，遇到了这样一个warning，报警的是下面这行代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">monitors: PropTypes.instanceOf(OrderedMap),</span><br></pre></td></tr></table></figure>
<p>检查了下，monitors 确实是一个OrderedMap实例，构造函数和原型看起来跟a完全一样。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var  a = new OrderedMap()</span><br><span class="line">// monitors.__proto__.constructor 和 a.__proto__.constructor 都是OrderedMap。。。</span><br><span class="line">Object.getPrototypeOf(monitors) == Object.getPrototypeOf(a) </span><br><span class="line">// false</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>那么可能是什么原因呢？<br>他们俩的原型不是同一个引用。<br>然而OrderedMap又都是从immutable import的，按理说应该是同一个OrderedMap啊，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123;OrderedMap&#125; from &#x27;immutable&#x27;;</span><br></pre></td></tr></table></figure>
<p>除非，monitors构造的时候使用的不是项目的当前项目全局的immutable。它有一个闭包，是用了在自己的作用域内 的OrderedMap生成的。<br>于是去查找 生成monitors的代码的位置，发现使用的是 scratch-vm包的方法，那继续去看npm 包scratch-vm， 结果发现， scratch-vm的package.json依赖的immutable是 3.8.1版本，而依赖于 scratch-vm的scratch-gui 也同时依赖了immutable ，只不过版本不同是 3.8.2.</p>
<p>那么根据npm的规则，项目依赖a和b(v1)两个包，a也依赖了b(v2)，那么b的两个版本的代码都会被下载和使用，并且a依赖的b(v2)应当只在a自己的作用域内使用的，全局使用的是b(v1)的代码，这样就能解释报警的现象了。<br>在次基础上如何干掉这个warning呢？只要保持主项目依赖的b包和朱项目依赖的a依赖的b包版本一致。<br>改 scratch-gui的package.json</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;immutable&quot;: &quot;3.8.1&quot;,</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>输入框限制字符长度导致中文输入法bug</title>
    <url>/hexo-blog/2023/10/08/%E8%BE%93%E5%85%A5%E6%A1%86%E9%99%90%E5%88%B6%E5%AD%97%E7%AC%A6%E9%95%BF%E5%BA%A6%E5%AF%BC%E8%87%B4%E4%B8%AD%E6%96%87%E8%BE%93%E5%85%A5%E6%B3%95bug/</url>
    <content><![CDATA[<p>我在别的网站也遇到过这种现象，就是一个限制了比如10长度的input标签，假设我想输入“中文输入法”，才5个字符是啊，然而当我使用拼音&gt; zhongwensh就再也无法输入下一个字符了。</p>
<p>我在使用react来写受控input组件也会出现这种现象，这显然不是我们想要的。那么如何才可以只让中文输入法最后空格确认中文的时候才判断字符长度是否符合要求呢？</p>
<p>那就是</p>
<p>不要用onchange方法！<br>不要用onchange方法！<br>不要用onchange方法！</p>
<p>用</p>
<p>input的maxlength属性！<br>input的maxlength属性！<br>input的maxlength属性！</p>
<p>直接在input的元素上设置maxlength&#x3D;。10, 就可以实现限制长度的功能，并且不会干扰中文输入法的拼音字符长度</p>
]]></content>
  </entry>
  <entry>
    <title>邮箱账号输入下拉建议点击无效bug</title>
    <url>/hexo-blog/2023/10/08/%E9%82%AE%E7%AE%B1%E8%B4%A6%E5%8F%B7%E8%BE%93%E5%85%A5%E4%B8%8B%E6%8B%89%E5%BB%BA%E8%AE%AE%E7%82%B9%E5%87%BB%E6%97%A0%E6%95%88bug/</url>
    <content><![CDATA[<h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><p>邮箱账号输入下拉建议列表的item上有click事件，我们期望是邮箱账号input在blur的时候隐藏下拉。点击下拉的item，输入框内的值变为item的值。</p>
<h2 id="问题-1，如果直接隐藏，就无法点击下拉元素。"><a href="#问题-1，如果直接隐藏，就无法点击下拉元素。" class="headerlink" title="问题 1，如果直接隐藏，就无法点击下拉元素。"></a>问题 1，如果直接隐藏，就无法点击下拉元素。</h2><p>因此网上一个常见的解决方案是在blur的回调中延时隐藏下拉。(侧面证明blur事件是先于click事件触发的)</p>
<h2 id="问题2，-在延迟隐藏下拉的条件下，部分浏览器依旧不触发item的click事件"><a href="#问题2，-在延迟隐藏下拉的条件下，部分浏览器依旧不触发item的click事件" class="headerlink" title="问题2， 在延迟隐藏下拉的条件下，部分浏览器依旧不触发item的click事件"></a>问题2， 在延迟隐藏下拉的条件下，部分浏览器依旧不触发item的click事件</h2><p>浏览器触发blur事件和click事件的顺序是，先blur，后click。可能某些浏览器不再触发blur之后的事件。</p>
<p>我们需要在触发blur前知道item被点击了。mousedown事件可以办到，为什么呢？</p>
<p>去这个<a href="https://codepen.io/mudassir0909/pen/eIHqB">codepen</a>体验一下点击事件和blur事件的触发顺序；</p>
<ul>
<li>button mousedown is fired. </li>
<li>input blur is fired. </li>
<li>button mouseup is fired. </li>
<li>button click is fired.</li>
</ul>
<p><a href="https://blog.csdn.net/ligang2585116/article/details/51764828">参考</a></p>
]]></content>
  </entry>
</search>
